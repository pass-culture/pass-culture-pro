// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | layout | OfferPreviewLink should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <OfferPreviewLink
    className="Fake className"
    offerWebappUrl="fake url"
    onClick={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <span
          data-place="bottom"
          data-tip="<p>Ouvrir un nouvel onglet avec la prévisualisation de l'offre</p>"
          data-type="info"
        >
          <Icon
            png={null}
            svg="ico-eye"
          />
        </span>,
        "Prévisualiser",
      ],
      "className": "Fake className",
      "href": "fake url",
      "onClick": [MockFunction],
      "rel": "noopener noreferrer",
      "target": "_blank",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Icon
            png={null}
            svg="ico-eye"
          />,
          "data-place": "bottom",
          "data-tip": "<p>Ouvrir un nouvel onglet avec la prévisualisation de l'offre</p>",
          "data-type": "info",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "png": null,
            "svg": "ico-eye",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "span",
      },
      "Prévisualiser",
    ],
    "type": "a",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            data-place="bottom"
            data-tip="<p>Ouvrir un nouvel onglet avec la prévisualisation de l'offre</p>"
            data-type="info"
          >
            <Icon
              png={null}
              svg="ico-eye"
            />
          </span>,
          "Prévisualiser",
        ],
        "className": "Fake className",
        "href": "fake url",
        "onClick": [MockFunction],
        "rel": "noopener noreferrer",
        "target": "_blank",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Icon
              png={null}
              svg="ico-eye"
            />,
            "data-place": "bottom",
            "data-tip": "<p>Ouvrir un nouvel onglet avec la prévisualisation de l'offre</p>",
            "data-type": "info",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "png": null,
              "svg": "ico-eye",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "span",
        },
        "Prévisualiser",
      ],
      "type": "a",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
