// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | layout | Main snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawMain
    Tag="main"
    dispatch={[MockFunction]}
    history={Object {}}
    location={Object {}}
    name="foo"
  >
    <div>
      foo
    </div>
  </RawMain>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <withRouter(Connect(RawHeader)) />,
        <ReactTooltip
          className="flex-center items-center"
          clickable={false}
          delayHide={500}
          effect="solid"
          html={true}
          insecure={true}
          resizeHide={true}
          wrapper="div"
        />,
        <main
          className="page foo-page container"
        >
          <div
            className="columns is-gapless"
          >
            <div
              className="page-content column is-10 is-offset-1"
            >
              <Connect(Notification) />
              <div
                className="after-notification-content"
              >
                <div
                  className="main-content"
                >
                  <div>
                    foo
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>,
        <withRouter(Connect(Modal)) />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "whiteHeader": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "className": "flex-center items-center",
          "clickable": false,
          "delayHide": 500,
          "effect": "solid",
          "html": true,
          "insecure": true,
          "resizeHide": true,
          "wrapper": "div",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="columns is-gapless"
            >
              <div
                className="page-content column is-10 is-offset-1"
              >
                <Connect(Notification) />
                <div
                  className="after-notification-content"
                >
                  <div
                    className="main-content"
                  >
                    <div>
                      foo
                    </div>
                  </div>
                </div>
              </div>
            </div>,
            undefined,
          ],
          "className": "page foo-page container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="page-content column is-10 is-offset-1"
              >
                <Connect(Notification) />
                <div
                  className="after-notification-content"
                >
                  <div
                    className="main-content"
                  >
                    <div>
                      foo
                    </div>
                  </div>
                </div>
              </div>,
              "className": "columns is-gapless",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Connect(Notification) />,
                  <div
                    className="after-notification-content"
                  >
                    <div
                      className="main-content"
                    >
                      <div>
                        foo
                      </div>
                    </div>
                  </div>,
                ],
                "className": "page-content column is-10 is-offset-1",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      undefined,
                      <div
                        className="main-content"
                      >
                        <div>
                          foo
                        </div>
                      </div>,
                      undefined,
                    ],
                    "className": "after-notification-content",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <div>
                            foo
                          </div>,
                        ],
                        "className": "main-content",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "foo",
                          },
                          "ref": null,
                          "rendered": "foo",
                          "type": "div",
                        },
                      ],
                      "type": "div",
                    },
                    undefined,
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          undefined,
        ],
        "type": "main",
      },
      Object {
        "instance": null,
        "key": "modal",
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <withRouter(Connect(RawHeader)) />,
          <ReactTooltip
            className="flex-center items-center"
            clickable={false}
            delayHide={500}
            effect="solid"
            html={true}
            insecure={true}
            resizeHide={true}
            wrapper="div"
          />,
          <main
            className="page foo-page container"
          >
            <div
              className="columns is-gapless"
            >
              <div
                className="page-content column is-10 is-offset-1"
              >
                <Connect(Notification) />
                <div
                  className="after-notification-content"
                >
                  <div
                    className="main-content"
                  >
                    <div>
                      foo
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </main>,
          <withRouter(Connect(Modal)) />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "whiteHeader": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "flex-center items-center",
            "clickable": false,
            "delayHide": 500,
            "effect": "solid",
            "html": true,
            "insecure": true,
            "resizeHide": true,
            "wrapper": "div",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="columns is-gapless"
              >
                <div
                  className="page-content column is-10 is-offset-1"
                >
                  <Connect(Notification) />
                  <div
                    className="after-notification-content"
                  >
                    <div
                      className="main-content"
                    >
                      <div>
                        foo
                      </div>
                    </div>
                  </div>
                </div>
              </div>,
              undefined,
            ],
            "className": "page foo-page container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="page-content column is-10 is-offset-1"
                >
                  <Connect(Notification) />
                  <div
                    className="after-notification-content"
                  >
                    <div
                      className="main-content"
                    >
                      <div>
                        foo
                      </div>
                    </div>
                  </div>
                </div>,
                "className": "columns is-gapless",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Connect(Notification) />,
                    <div
                      className="after-notification-content"
                    >
                      <div
                        className="main-content"
                      >
                        <div>
                          foo
                        </div>
                      </div>
                    </div>,
                  ],
                  "className": "page-content column is-10 is-offset-1",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        undefined,
                        <div
                          className="main-content"
                        >
                          <div>
                            foo
                          </div>
                        </div>,
                        undefined,
                      ],
                      "className": "after-notification-content",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <div>
                              foo
                            </div>,
                          ],
                          "className": "main-content",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "foo",
                            },
                            "ref": null,
                            "rendered": "foo",
                            "type": "div",
                          },
                        ],
                        "type": "div",
                      },
                      undefined,
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            undefined,
          ],
          "type": "main",
        },
        Object {
          "instance": null,
          "key": "modal",
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
