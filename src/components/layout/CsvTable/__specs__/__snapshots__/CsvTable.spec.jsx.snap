// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | layout | CsvTable should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CsvTable
    currentUser={
      Object {
        "publicName": "super nom",
      }
    }
    downloadFileOrNotifyAnError={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Header
          isSmall={true}
          name="super nom"
          offerers={Array []}
          whiteHeader={false}
        />,
        <div
          id="spinner-container"
        >
          <Spinner
            Tag="div"
            className={null}
            dotFrequency={500}
            label="Chargement"
            style={null}
          />
        </div>,
        false,
        false,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "isSmall": true,
          "name": "super nom",
          "offerers": Array [],
          "whiteHeader": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Spinner
            Tag="div"
            className={null}
            dotFrequency={500}
            label="Chargement"
            style={null}
          />,
          "id": "spinner-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "Tag": "div",
            "className": null,
            "dotFrequency": 500,
            "label": "Chargement",
            "style": null,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      false,
      false,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Header
            isSmall={true}
            name="super nom"
            offerers={Array []}
            whiteHeader={false}
          />,
          <div
            id="spinner-container"
          >
            <Spinner
              Tag="div"
              className={null}
              dotFrequency={500}
              label="Chargement"
              style={null}
            />
          </div>,
          false,
          false,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "isSmall": true,
            "name": "super nom",
            "offerers": Array [],
            "whiteHeader": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Spinner
              Tag="div"
              className={null}
              dotFrequency={500}
              label="Chargement"
              style={null}
            />,
            "id": "spinner-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "Tag": "div",
              "className": null,
              "dotFrequency": 500,
              "label": "Chargement",
              "style": null,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        false,
        false,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
