// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | layout | Notification snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Notification
    dispatch={[MockFunction]}
    isFullscreen={false}
    notification={Object {}}
    tooltip={null}
    type={null}
    url={null}
    urlLabel={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="is-flex fullscreen small-padding"
      >
        <div
          className="notification-description"
        >
          <Icon
            svg="picto-echec"
          />
          <span
            className="ml8 mb6"
          />
        </div>
        <div
          className="notification-action-links"
        >
          <button
            className="close pl12"
            onClick={[Function]}
          >
            OK
          </button>
        </div>
      </div>,
      "className": "notification is-info",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="notification-description"
          >
            <Icon
              svg="picto-echec"
            />
            <span
              className="ml8 mb6"
            />
          </div>,
          <div
            className="notification-action-links"
          >
            <button
              className="close pl12"
              onClick={[Function]}
            >
              OK
            </button>
          </div>,
        ],
        "className": "is-flex fullscreen small-padding",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Icon
                svg="picto-echec"
              />,
              <span
                className="ml8 mb6"
              />,
            ],
            "className": "notification-description",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "svg": "picto-echec",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "ml8 mb6",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              <button
                className="close pl12"
                onClick={[Function]}
              >
                OK
              </button>,
            ],
            "className": "notification-action-links",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "OK",
                "className": "close pl12",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "OK",
              "type": "button",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="is-flex fullscreen small-padding"
        >
          <div
            className="notification-description"
          >
            <Icon
              svg="picto-echec"
            />
            <span
              className="ml8 mb6"
            />
          </div>
          <div
            className="notification-action-links"
          >
            <button
              className="close pl12"
              onClick={[Function]}
            >
              OK
            </button>
          </div>
        </div>,
        "className": "notification is-info",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="notification-description"
            >
              <Icon
                svg="picto-echec"
              />
              <span
                className="ml8 mb6"
              />
            </div>,
            <div
              className="notification-action-links"
            >
              <button
                className="close pl12"
                onClick={[Function]}
              >
                OK
              </button>
            </div>,
          ],
          "className": "is-flex fullscreen small-padding",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Icon
                  svg="picto-echec"
                />,
                <span
                  className="ml8 mb6"
                />,
              ],
              "className": "notification-description",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "svg": "picto-echec",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "ml8 mb6",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                undefined,
                <button
                  className="close pl12"
                  onClick={[Function]}
                >
                  OK
                </button>,
              ],
              "className": "notification-action-links",
            },
            "ref": null,
            "rendered": Array [
              undefined,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "OK",
                  "className": "close pl12",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "OK",
                "type": "button",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
