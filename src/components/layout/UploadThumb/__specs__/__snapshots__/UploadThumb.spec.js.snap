// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | layout | UploadThumb | should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UploadThumb
    border={25}
    borderRadius={250}
    className={null}
    collectionName="fake"
    dispatch={[MockFunction]}
    entityId={null}
    hasExistingImage={false}
    height={250}
    image={
      Object {
        "name": "IMG_4366.jpg",
        "size": 1503804,
        "type": "image/jpeg",
      }
    }
    index={0}
    maxSize={10}
    onImageChange={[MockFunction]}
    storeKey="image"
    width={250}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="upload-thumb"
      >
        <t
          className="dropzone has-image"
          disableClick={true}
          disablePreview={false}
          disabled={false}
          getDataTransferItems={[Function]}
          inputProps={Object {}}
          maxSize={Infinity}
          minSize={0}
          multiple={true}
          onDragEnter={[Function]}
          onDragLeave={[Function]}
          onDrop={[Function]}
          preventDropOnDocument={true}
        >
          <d
            border={25}
            borderRadius={250}
            className="avatar editor"
            color={
              Array [
                255,
                255,
                255,
                0.6,
              ]
            }
            height={250}
            image={
              Object {
                "name": "IMG_4366.jpg",
                "size": 1503804,
                "type": "image/jpeg",
              }
            }
            onImageChange={[Function]}
            onImageReady={[Function]}
            onLoadFailure={[Function]}
            onLoadSuccess={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onPositionChange={[Function]}
            rotate={0}
            scale={1}
            style={Object {}}
            width={250}
          />
          <div
            id="zoomControl"
          >
            <button
              className="change-zoom decrement"
              onClick={[Function]}
              type="button"
            >
              <span>
                -
              </span>
            </button>
            <input
              className="zoom level-left"
              max="4"
              min="1"
              name="zoomLeft"
              onChange={[Function]}
              step="0.01"
              type="range"
              value={1}
            />
            <button
              className="change-zoom increment"
              onClick={[Function]}
              type="button"
            >
              <span>
                +
              </span>
            </button>
          </div>
        </t>
        <nav
          className="field content"
        >
          <div
            className="field is-grouped is-grouped-centered"
          >
            <div
              className="control"
            />
            <div
              className="control"
            >
              <button
                className="button is-primary is-outlined"
                name="removeImage"
                onClick={[Function]}
                type="button"
              >
                Retirer l'image
              </button>
            </div>
          </div>
        </nav>
      </div>,
      "className": "field",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <t
            className="dropzone has-image"
            disableClick={true}
            disablePreview={false}
            disabled={false}
            getDataTransferItems={[Function]}
            inputProps={Object {}}
            maxSize={Infinity}
            minSize={0}
            multiple={true}
            onDragEnter={[Function]}
            onDragLeave={[Function]}
            onDrop={[Function]}
            preventDropOnDocument={true}
          >
            <d
              border={25}
              borderRadius={250}
              className="avatar editor"
              color={
                Array [
                  255,
                  255,
                  255,
                  0.6,
                ]
              }
              height={250}
              image={
                Object {
                  "name": "IMG_4366.jpg",
                  "size": 1503804,
                  "type": "image/jpeg",
                }
              }
              onImageChange={[Function]}
              onImageReady={[Function]}
              onLoadFailure={[Function]}
              onLoadSuccess={[Function]}
              onMouseMove={[Function]}
              onMouseUp={[Function]}
              onPositionChange={[Function]}
              rotate={0}
              scale={1}
              style={Object {}}
              width={250}
            />
            <div
              id="zoomControl"
            >
              <button
                className="change-zoom decrement"
                onClick={[Function]}
                type="button"
              >
                <span>
                  -
                </span>
              </button>
              <input
                className="zoom level-left"
                max="4"
                min="1"
                name="zoomLeft"
                onChange={[Function]}
                step="0.01"
                type="range"
                value={1}
              />
              <button
                className="change-zoom increment"
                onClick={[Function]}
                type="button"
              >
                <span>
                  +
                </span>
              </button>
            </div>
          </t>,
          <nav
            className="field content"
          >
            <div
              className="field is-grouped is-grouped-centered"
            >
              <div
                className="control"
              />
              <div
                className="control"
              >
                <button
                  className="button is-primary is-outlined"
                  name="removeImage"
                  onClick={[Function]}
                  type="button"
                >
                  Retirer l'image
                </button>
              </div>
            </div>
          </nav>,
        ],
        "className": "upload-thumb",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              false,
              <d
                border={25}
                borderRadius={250}
                className="avatar editor"
                color={
                  Array [
                    255,
                    255,
                    255,
                    0.6,
                  ]
                }
                height={250}
                image={
                  Object {
                    "name": "IMG_4366.jpg",
                    "size": 1503804,
                    "type": "image/jpeg",
                  }
                }
                onImageChange={[Function]}
                onImageReady={[Function]}
                onLoadFailure={[Function]}
                onLoadSuccess={[Function]}
                onMouseMove={[Function]}
                onMouseUp={[Function]}
                onPositionChange={[Function]}
                rotate={0}
                scale={1}
                style={Object {}}
                width={250}
              />,
              <div
                id="zoomControl"
              >
                <button
                  className="change-zoom decrement"
                  onClick={[Function]}
                  type="button"
                >
                  <span>
                    -
                  </span>
                </button>
                <input
                  className="zoom level-left"
                  max="4"
                  min="1"
                  name="zoomLeft"
                  onChange={[Function]}
                  step="0.01"
                  type="range"
                  value={1}
                />
                <button
                  className="change-zoom increment"
                  onClick={[Function]}
                  type="button"
                >
                  <span>
                    +
                  </span>
                </button>
              </div>,
            ],
            "className": "dropzone has-image",
            "disableClick": true,
            "disablePreview": false,
            "disabled": false,
            "getDataTransferItems": [Function],
            "inputProps": Object {},
            "maxSize": Infinity,
            "minSize": 0,
            "multiple": true,
            "onDragEnter": [Function],
            "onDragLeave": [Function],
            "onDrop": [Function],
            "preventDropOnDocument": true,
          },
          "ref": null,
          "rendered": Array [
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "border": 25,
                "borderRadius": 250,
                "className": "avatar editor",
                "color": Array [
                  255,
                  255,
                  255,
                  0.6,
                ],
                "height": 250,
                "image": Object {
                  "name": "IMG_4366.jpg",
                  "size": 1503804,
                  "type": "image/jpeg",
                },
                "onImageChange": [Function],
                "onImageReady": [Function],
                "onLoadFailure": [Function],
                "onLoadSuccess": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
                "onPositionChange": [Function],
                "rotate": 0,
                "scale": 1,
                "style": Object {},
                "width": 250,
              },
              "ref": Object {
                "current": null,
              },
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <button
                    className="change-zoom decrement"
                    onClick={[Function]}
                    type="button"
                  >
                    <span>
                      -
                    </span>
                  </button>,
                  <input
                    className="zoom level-left"
                    max="4"
                    min="1"
                    name="zoomLeft"
                    onChange={[Function]}
                    step="0.01"
                    type="range"
                    value={1}
                  />,
                  <button
                    className="change-zoom increment"
                    onClick={[Function]}
                    type="button"
                  >
                    <span>
                      +
                    </span>
                  </button>,
                ],
                "id": "zoomControl",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <span>
                      -
                    </span>,
                    "className": "change-zoom decrement",
                    "onClick": [Function],
                    "type": "button",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "-",
                    },
                    "ref": null,
                    "rendered": "-",
                    "type": "span",
                  },
                  "type": "button",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "zoom level-left",
                    "max": "4",
                    "min": "1",
                    "name": "zoomLeft",
                    "onChange": [Function],
                    "step": "0.01",
                    "type": "range",
                    "value": 1,
                  },
                  "ref": [Function],
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <span>
                      +
                    </span>,
                    "className": "change-zoom increment",
                    "onClick": [Function],
                    "type": "button",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "+",
                    },
                    "ref": null,
                    "rendered": "+",
                    "type": "span",
                  },
                  "type": "button",
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              false,
              <div
                className="field is-grouped is-grouped-centered"
              >
                <div
                  className="control"
                />
                <div
                  className="control"
                >
                  <button
                    className="button is-primary is-outlined"
                    name="removeImage"
                    onClick={[Function]}
                    type="button"
                  >
                    Retirer l'image
                  </button>
                </div>
              </div>,
            ],
            "className": "field content",
          },
          "ref": null,
          "rendered": Array [
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="control"
                  />,
                  <div
                    className="control"
                  >
                    <button
                      className="button is-primary is-outlined"
                      name="removeImage"
                      onClick={[Function]}
                      type="button"
                    >
                      Retirer l'image
                    </button>
                  </div>,
                  false,
                ],
                "className": "field is-grouped is-grouped-centered",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      false,
                      false,
                    ],
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Array [
                    false,
                    false,
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <button
                      className="button is-primary is-outlined"
                      name="removeImage"
                      onClick={[Function]}
                      type="button"
                    >
                      Retirer l'image
                    </button>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Retirer l'image",
                      "className": "button is-primary is-outlined",
                      "name": "removeImage",
                      "onClick": [Function],
                      "type": "button",
                    },
                    "ref": null,
                    "rendered": "Retirer l'image",
                    "type": "button",
                  },
                  "type": "div",
                },
                false,
              ],
              "type": "div",
            },
          ],
          "type": "nav",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="upload-thumb"
        >
          <t
            className="dropzone has-image"
            disableClick={true}
            disablePreview={false}
            disabled={false}
            getDataTransferItems={[Function]}
            inputProps={Object {}}
            maxSize={Infinity}
            minSize={0}
            multiple={true}
            onDragEnter={[Function]}
            onDragLeave={[Function]}
            onDrop={[Function]}
            preventDropOnDocument={true}
          >
            <d
              border={25}
              borderRadius={250}
              className="avatar editor"
              color={
                Array [
                  255,
                  255,
                  255,
                  0.6,
                ]
              }
              height={250}
              image={
                Object {
                  "name": "IMG_4366.jpg",
                  "size": 1503804,
                  "type": "image/jpeg",
                }
              }
              onImageChange={[Function]}
              onImageReady={[Function]}
              onLoadFailure={[Function]}
              onLoadSuccess={[Function]}
              onMouseMove={[Function]}
              onMouseUp={[Function]}
              onPositionChange={[Function]}
              rotate={0}
              scale={1}
              style={Object {}}
              width={250}
            />
            <div
              id="zoomControl"
            >
              <button
                className="change-zoom decrement"
                onClick={[Function]}
                type="button"
              >
                <span>
                  -
                </span>
              </button>
              <input
                className="zoom level-left"
                max="4"
                min="1"
                name="zoomLeft"
                onChange={[Function]}
                step="0.01"
                type="range"
                value={1}
              />
              <button
                className="change-zoom increment"
                onClick={[Function]}
                type="button"
              >
                <span>
                  +
                </span>
              </button>
            </div>
          </t>
          <nav
            className="field content"
          >
            <div
              className="field is-grouped is-grouped-centered"
            >
              <div
                className="control"
              />
              <div
                className="control"
              >
                <button
                  className="button is-primary is-outlined"
                  name="removeImage"
                  onClick={[Function]}
                  type="button"
                >
                  Retirer l'image
                </button>
              </div>
            </div>
          </nav>
        </div>,
        "className": "field",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <t
              className="dropzone has-image"
              disableClick={true}
              disablePreview={false}
              disabled={false}
              getDataTransferItems={[Function]}
              inputProps={Object {}}
              maxSize={Infinity}
              minSize={0}
              multiple={true}
              onDragEnter={[Function]}
              onDragLeave={[Function]}
              onDrop={[Function]}
              preventDropOnDocument={true}
            >
              <d
                border={25}
                borderRadius={250}
                className="avatar editor"
                color={
                  Array [
                    255,
                    255,
                    255,
                    0.6,
                  ]
                }
                height={250}
                image={
                  Object {
                    "name": "IMG_4366.jpg",
                    "size": 1503804,
                    "type": "image/jpeg",
                  }
                }
                onImageChange={[Function]}
                onImageReady={[Function]}
                onLoadFailure={[Function]}
                onLoadSuccess={[Function]}
                onMouseMove={[Function]}
                onMouseUp={[Function]}
                onPositionChange={[Function]}
                rotate={0}
                scale={1}
                style={Object {}}
                width={250}
              />
              <div
                id="zoomControl"
              >
                <button
                  className="change-zoom decrement"
                  onClick={[Function]}
                  type="button"
                >
                  <span>
                    -
                  </span>
                </button>
                <input
                  className="zoom level-left"
                  max="4"
                  min="1"
                  name="zoomLeft"
                  onChange={[Function]}
                  step="0.01"
                  type="range"
                  value={1}
                />
                <button
                  className="change-zoom increment"
                  onClick={[Function]}
                  type="button"
                >
                  <span>
                    +
                  </span>
                </button>
              </div>
            </t>,
            <nav
              className="field content"
            >
              <div
                className="field is-grouped is-grouped-centered"
              >
                <div
                  className="control"
                />
                <div
                  className="control"
                >
                  <button
                    className="button is-primary is-outlined"
                    name="removeImage"
                    onClick={[Function]}
                    type="button"
                  >
                    Retirer l'image
                  </button>
                </div>
              </div>
            </nav>,
          ],
          "className": "upload-thumb",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                false,
                <d
                  border={25}
                  borderRadius={250}
                  className="avatar editor"
                  color={
                    Array [
                      255,
                      255,
                      255,
                      0.6,
                    ]
                  }
                  height={250}
                  image={
                    Object {
                      "name": "IMG_4366.jpg",
                      "size": 1503804,
                      "type": "image/jpeg",
                    }
                  }
                  onImageChange={[Function]}
                  onImageReady={[Function]}
                  onLoadFailure={[Function]}
                  onLoadSuccess={[Function]}
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onPositionChange={[Function]}
                  rotate={0}
                  scale={1}
                  style={Object {}}
                  width={250}
                />,
                <div
                  id="zoomControl"
                >
                  <button
                    className="change-zoom decrement"
                    onClick={[Function]}
                    type="button"
                  >
                    <span>
                      -
                    </span>
                  </button>
                  <input
                    className="zoom level-left"
                    max="4"
                    min="1"
                    name="zoomLeft"
                    onChange={[Function]}
                    step="0.01"
                    type="range"
                    value={1}
                  />
                  <button
                    className="change-zoom increment"
                    onClick={[Function]}
                    type="button"
                  >
                    <span>
                      +
                    </span>
                  </button>
                </div>,
              ],
              "className": "dropzone has-image",
              "disableClick": true,
              "disablePreview": false,
              "disabled": false,
              "getDataTransferItems": [Function],
              "inputProps": Object {},
              "maxSize": Infinity,
              "minSize": 0,
              "multiple": true,
              "onDragEnter": [Function],
              "onDragLeave": [Function],
              "onDrop": [Function],
              "preventDropOnDocument": true,
            },
            "ref": null,
            "rendered": Array [
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "border": 25,
                  "borderRadius": 250,
                  "className": "avatar editor",
                  "color": Array [
                    255,
                    255,
                    255,
                    0.6,
                  ],
                  "height": 250,
                  "image": Object {
                    "name": "IMG_4366.jpg",
                    "size": 1503804,
                    "type": "image/jpeg",
                  },
                  "onImageChange": [Function],
                  "onImageReady": [Function],
                  "onLoadFailure": [Function],
                  "onLoadSuccess": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                  "onPositionChange": [Function],
                  "rotate": 0,
                  "scale": 1,
                  "style": Object {},
                  "width": 250,
                },
                "ref": Object {
                  "current": null,
                },
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <button
                      className="change-zoom decrement"
                      onClick={[Function]}
                      type="button"
                    >
                      <span>
                        -
                      </span>
                    </button>,
                    <input
                      className="zoom level-left"
                      max="4"
                      min="1"
                      name="zoomLeft"
                      onChange={[Function]}
                      step="0.01"
                      type="range"
                      value={1}
                    />,
                    <button
                      className="change-zoom increment"
                      onClick={[Function]}
                      type="button"
                    >
                      <span>
                        +
                      </span>
                    </button>,
                  ],
                  "id": "zoomControl",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <span>
                        -
                      </span>,
                      "className": "change-zoom decrement",
                      "onClick": [Function],
                      "type": "button",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "-",
                      },
                      "ref": null,
                      "rendered": "-",
                      "type": "span",
                    },
                    "type": "button",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "zoom level-left",
                      "max": "4",
                      "min": "1",
                      "name": "zoomLeft",
                      "onChange": [Function],
                      "step": "0.01",
                      "type": "range",
                      "value": 1,
                    },
                    "ref": [Function],
                    "rendered": null,
                    "type": "input",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <span>
                        +
                      </span>,
                      "className": "change-zoom increment",
                      "onClick": [Function],
                      "type": "button",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "+",
                      },
                      "ref": null,
                      "rendered": "+",
                      "type": "span",
                    },
                    "type": "button",
                  },
                ],
                "type": "div",
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                false,
                <div
                  className="field is-grouped is-grouped-centered"
                >
                  <div
                    className="control"
                  />
                  <div
                    className="control"
                  >
                    <button
                      className="button is-primary is-outlined"
                      name="removeImage"
                      onClick={[Function]}
                      type="button"
                    >
                      Retirer l'image
                    </button>
                  </div>
                </div>,
              ],
              "className": "field content",
            },
            "ref": null,
            "rendered": Array [
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="control"
                    />,
                    <div
                      className="control"
                    >
                      <button
                        className="button is-primary is-outlined"
                        name="removeImage"
                        onClick={[Function]}
                        type="button"
                      >
                        Retirer l'image
                      </button>
                    </div>,
                    false,
                  ],
                  "className": "field is-grouped is-grouped-centered",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        false,
                        false,
                      ],
                      "className": "control",
                    },
                    "ref": null,
                    "rendered": Array [
                      false,
                      false,
                    ],
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <button
                        className="button is-primary is-outlined"
                        name="removeImage"
                        onClick={[Function]}
                        type="button"
                      >
                        Retirer l'image
                      </button>,
                      "className": "control",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Retirer l'image",
                        "className": "button is-primary is-outlined",
                        "name": "removeImage",
                        "onClick": [Function],
                        "type": "button",
                      },
                      "ref": null,
                      "rendered": "Retirer l'image",
                      "type": "button",
                    },
                    "type": "div",
                  },
                  false,
                ],
                "type": "div",
              },
            ],
            "type": "nav",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
