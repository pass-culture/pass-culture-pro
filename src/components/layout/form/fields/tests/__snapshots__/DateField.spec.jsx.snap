// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | layout | form | DateField should match snapchot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ReactFinalForm
    initialValues={
      Object {
        "myDate": "2019-04-27T20:00:00Z",
      }
    }
    onSubmit={[Function]}
    render={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <form>
        <DateField
          autoComplete={false}
          className=""
          clearable={false}
          dateFormat="DD/MM/YYYY"
          datePickerClassName="date"
          disabled={false}
          id={null}
          label=""
          locale="fr"
          name="myDate"
          placeholder="Please enter a value"
          readOnly={false}
          renderValue={[Function]}
          required={false}
          timezone={null}
          validate={null}
        />
        <button
          onClick={[Function]}
          type="submit"
        >
          Submit
        </button>
      </form>,
      "value": Object {
        "batch": [Function],
        "blur": [Function],
        "change": [Function],
        "destroyOnUnregister": false,
        "focus": [Function],
        "getFieldState": [Function],
        "getRegisteredFields": [Function],
        "getState": [Function],
        "initialize": [Function],
        "isValidationPaused": [Function],
        "mutators": Object {},
        "pauseValidation": [Function],
        "registerField": [Function],
        "reset": [Function],
        "resetFieldState": [Function],
        "resumeValidation": [Function],
        "setConfig": [Function],
        "submit": [Function],
        "subscribe": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <DateField
            autoComplete={false}
            className=""
            clearable={false}
            dateFormat="DD/MM/YYYY"
            datePickerClassName="date"
            disabled={false}
            id={null}
            label=""
            locale="fr"
            name="myDate"
            placeholder="Please enter a value"
            readOnly={false}
            renderValue={[Function]}
            required={false}
            timezone={null}
            validate={null}
          />,
          <button
            onClick={[Function]}
            type="submit"
          >
            Submit
          </button>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoComplete": false,
            "className": "",
            "clearable": false,
            "dateFormat": "DD/MM/YYYY",
            "datePickerClassName": "date",
            "disabled": false,
            "id": null,
            "label": "",
            "locale": "fr",
            "name": "myDate",
            "placeholder": "Please enter a value",
            "readOnly": false,
            "renderValue": [Function],
            "required": false,
            "timezone": null,
            "validate": null,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Submit",
            "onClick": [Function],
            "type": "submit",
          },
          "ref": null,
          "rendered": "Submit",
          "type": "button",
        },
      ],
      "type": "form",
    },
    "type": Object {
      "$$typeof": Symbol(react.provider),
      "_context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "_calculateChangedBits": null,
          "_context": [Circular],
        },
        "Provider": [Circular],
        "_calculateChangedBits": null,
        "_currentRenderer": null,
        "_currentRenderer2": null,
        "_currentValue": undefined,
        "_currentValue2": undefined,
        "_threadCount": 0,
      },
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <form>
          <DateField
            autoComplete={false}
            className=""
            clearable={false}
            dateFormat="DD/MM/YYYY"
            datePickerClassName="date"
            disabled={false}
            id={null}
            label=""
            locale="fr"
            name="myDate"
            placeholder="Please enter a value"
            readOnly={false}
            renderValue={[Function]}
            required={false}
            timezone={null}
            validate={null}
          />
          <button
            onClick={[Function]}
            type="submit"
          >
            Submit
          </button>
        </form>,
        "value": Object {
          "batch": [Function],
          "blur": [Function],
          "change": [Function],
          "destroyOnUnregister": false,
          "focus": [Function],
          "getFieldState": [Function],
          "getRegisteredFields": [Function],
          "getState": [Function],
          "initialize": [Function],
          "isValidationPaused": [Function],
          "mutators": Object {},
          "pauseValidation": [Function],
          "registerField": [Function],
          "reset": [Function],
          "resetFieldState": [Function],
          "resumeValidation": [Function],
          "setConfig": [Function],
          "submit": [Function],
          "subscribe": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <DateField
              autoComplete={false}
              className=""
              clearable={false}
              dateFormat="DD/MM/YYYY"
              datePickerClassName="date"
              disabled={false}
              id={null}
              label=""
              locale="fr"
              name="myDate"
              placeholder="Please enter a value"
              readOnly={false}
              renderValue={[Function]}
              required={false}
              timezone={null}
              validate={null}
            />,
            <button
              onClick={[Function]}
              type="submit"
            >
              Submit
            </button>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "autoComplete": false,
              "className": "",
              "clearable": false,
              "dateFormat": "DD/MM/YYYY",
              "datePickerClassName": "date",
              "disabled": false,
              "id": null,
              "label": "",
              "locale": "fr",
              "name": "myDate",
              "placeholder": "Please enter a value",
              "readOnly": false,
              "renderValue": [Function],
              "required": false,
              "timezone": null,
              "validate": null,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Submit",
              "onClick": [Function],
              "type": "submit",
            },
            "ref": null,
            "rendered": "Submit",
            "type": "button",
          },
        ],
        "type": "form",
      },
      "type": Object {
        "$$typeof": Symbol(react.provider),
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": [Circular],
          "_calculateChangedBits": null,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": undefined,
          "_currentValue2": undefined,
          "_threadCount": 0,
        },
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
