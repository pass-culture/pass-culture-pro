// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | Offer | StocksManager | StockItem should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <StockItem
    closeInfo={[MockFunction]}
    dispatch={[MockFunction]}
    handleSetErrors={[MockFunction]}
    hasIban={false}
    history={
      Object {
        "push": [MockFunction],
      }
    }
    isEvent={false}
    offer={
      Object {
        "id": "TY",
      }
    }
    query={
      Object {
        "changeToReadOnly": [MockFunction],
        "context": [Function],
      }
    }
    showInfo={[MockFunction]}
    stockPatch={
      Object {
        "id": "DG",
      }
    }
    stocks={Array []}
    timezone={null}
    venue={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <ReactFinalForm
        decorators={
          Array [
            [Function],
          ]
        }
        initialValues={
          Object {
            "id": "DG",
          }
        }
        onSubmit={[Function]}
        render={[Function]}
      />,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "decorators": Array [
          [Function],
        ],
        "initialValues": Object {
          "id": "DG",
        },
        "onSubmit": [Function],
        "render": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": "tbody",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <ReactFinalForm
          decorators={
            Array [
              [Function],
            ]
          }
          initialValues={
            Object {
              "id": "DG",
            }
          }
          onSubmit={[Function]}
          render={[Function]}
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "decorators": Array [
            [Function],
          ],
          "initialValues": Object {
            "id": "DG",
          },
          "onSubmit": [Function],
          "render": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": "tbody",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
