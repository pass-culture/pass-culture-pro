// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | Offer | StocksManager | StockItem | sub-components | fields | ProductFields should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ProductFields
    beginningDatetime={null}
    closeInfo={[MockFunction]}
    dispatch={[MockFunction]}
    hasIban={false}
    isEvent={true}
    parseFormChild={[MockFunction]}
    readOnly={true}
    showInfo={[MockFunction]}
    stock={null}
    timezone={null}
    venue={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <td
          title="Gratuit si vide"
        >
          <HiddenField
            name="offerId"
            type="hidden"
            validator={[Function]}
          />
          <HiddenField
            name="venueId"
            type="hidden"
            validator={[Function]}
          />
          <PriceField
            format={[Function]}
            name="price"
            onBlur={[Function]}
            placeholder="Gratuit"
            readOnly={true}
            title="Prix"
          />
        </td>,
        <td
          className="tooltiped"
          title="Laissez vide si pas de limite"
        >
          <DateField
            autoComplete={false}
            className=""
            clearable={false}
            dateFormat="DD/MM/YYYY"
            datePickerClassName="date"
            disabled={false}
            id={null}
            label=""
            locale="fr"
            maxDate={null}
            name="bookingLimitDatetime"
            placeholder="Laissez vide si pas de limite"
            readOnly={true}
            renderValue={[Function]}
            required={false}
            timezone={null}
            validate={null}
          />
        </td>,
        <td
          className="tooltiped"
        >
          <NumberField
            format={[Function]}
            name="available"
            placeholder="Illimité"
            readOnly={true}
            renderValue={[Function]}
            title="Stock[ou] Places affecté[es]"
          />
        </td>,
        <td
          className="is-small remaining-stock"
          id="remaining-stock"
        >
          Illimité
        </td>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <HiddenField
              name="offerId"
              type="hidden"
              validator={[Function]}
            />,
            <HiddenField
              name="venueId"
              type="hidden"
              validator={[Function]}
            />,
            <PriceField
              format={[Function]}
              name="price"
              onBlur={[Function]}
              placeholder="Gratuit"
              readOnly={true}
              title="Prix"
            />,
          ],
          "title": "Gratuit si vide",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "name": "offerId",
              "type": "hidden",
              "validator": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "name": "venueId",
              "type": "hidden",
              "validator": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "format": [Function],
              "name": "price",
              "onBlur": [Function],
              "placeholder": "Gratuit",
              "readOnly": true,
              "title": "Prix",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "td",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <DateField
            autoComplete={false}
            className=""
            clearable={false}
            dateFormat="DD/MM/YYYY"
            datePickerClassName="date"
            disabled={false}
            id={null}
            label=""
            locale="fr"
            maxDate={null}
            name="bookingLimitDatetime"
            placeholder="Laissez vide si pas de limite"
            readOnly={true}
            renderValue={[Function]}
            required={false}
            timezone={null}
            validate={null}
          />,
          "className": "tooltiped",
          "title": "Laissez vide si pas de limite",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoComplete": false,
            "className": "",
            "clearable": false,
            "dateFormat": "DD/MM/YYYY",
            "datePickerClassName": "date",
            "disabled": false,
            "id": null,
            "label": "",
            "locale": "fr",
            "maxDate": null,
            "name": "bookingLimitDatetime",
            "placeholder": "Laissez vide si pas de limite",
            "readOnly": true,
            "renderValue": [Function],
            "required": false,
            "timezone": null,
            "validate": null,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "td",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <NumberField
            format={[Function]}
            name="available"
            placeholder="Illimité"
            readOnly={true}
            renderValue={[Function]}
            title="Stock[ou] Places affecté[es]"
          />,
          "className": "tooltiped",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "format": [Function],
            "name": "available",
            "placeholder": "Illimité",
            "readOnly": true,
            "renderValue": [Function],
            "title": "Stock[ou] Places affecté[es]",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "td",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Illimité",
          "className": "is-small remaining-stock",
          "id": "remaining-stock",
        },
        "ref": null,
        "rendered": "Illimité",
        "type": "td",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <td
            title="Gratuit si vide"
          >
            <HiddenField
              name="offerId"
              type="hidden"
              validator={[Function]}
            />
            <HiddenField
              name="venueId"
              type="hidden"
              validator={[Function]}
            />
            <PriceField
              format={[Function]}
              name="price"
              onBlur={[Function]}
              placeholder="Gratuit"
              readOnly={true}
              title="Prix"
            />
          </td>,
          <td
            className="tooltiped"
            title="Laissez vide si pas de limite"
          >
            <DateField
              autoComplete={false}
              className=""
              clearable={false}
              dateFormat="DD/MM/YYYY"
              datePickerClassName="date"
              disabled={false}
              id={null}
              label=""
              locale="fr"
              maxDate={null}
              name="bookingLimitDatetime"
              placeholder="Laissez vide si pas de limite"
              readOnly={true}
              renderValue={[Function]}
              required={false}
              timezone={null}
              validate={null}
            />
          </td>,
          <td
            className="tooltiped"
          >
            <NumberField
              format={[Function]}
              name="available"
              placeholder="Illimité"
              readOnly={true}
              renderValue={[Function]}
              title="Stock[ou] Places affecté[es]"
            />
          </td>,
          <td
            className="is-small remaining-stock"
            id="remaining-stock"
          >
            Illimité
          </td>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <HiddenField
                name="offerId"
                type="hidden"
                validator={[Function]}
              />,
              <HiddenField
                name="venueId"
                type="hidden"
                validator={[Function]}
              />,
              <PriceField
                format={[Function]}
                name="price"
                onBlur={[Function]}
                placeholder="Gratuit"
                readOnly={true}
                title="Prix"
              />,
            ],
            "title": "Gratuit si vide",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "name": "offerId",
                "type": "hidden",
                "validator": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "name": "venueId",
                "type": "hidden",
                "validator": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "format": [Function],
                "name": "price",
                "onBlur": [Function],
                "placeholder": "Gratuit",
                "readOnly": true,
                "title": "Prix",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "td",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <DateField
              autoComplete={false}
              className=""
              clearable={false}
              dateFormat="DD/MM/YYYY"
              datePickerClassName="date"
              disabled={false}
              id={null}
              label=""
              locale="fr"
              maxDate={null}
              name="bookingLimitDatetime"
              placeholder="Laissez vide si pas de limite"
              readOnly={true}
              renderValue={[Function]}
              required={false}
              timezone={null}
              validate={null}
            />,
            "className": "tooltiped",
            "title": "Laissez vide si pas de limite",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "autoComplete": false,
              "className": "",
              "clearable": false,
              "dateFormat": "DD/MM/YYYY",
              "datePickerClassName": "date",
              "disabled": false,
              "id": null,
              "label": "",
              "locale": "fr",
              "maxDate": null,
              "name": "bookingLimitDatetime",
              "placeholder": "Laissez vide si pas de limite",
              "readOnly": true,
              "renderValue": [Function],
              "required": false,
              "timezone": null,
              "validate": null,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "td",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <NumberField
              format={[Function]}
              name="available"
              placeholder="Illimité"
              readOnly={true}
              renderValue={[Function]}
              title="Stock[ou] Places affecté[es]"
            />,
            "className": "tooltiped",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "format": [Function],
              "name": "available",
              "placeholder": "Illimité",
              "readOnly": true,
              "renderValue": [Function],
              "title": "Stock[ou] Places affecté[es]",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "td",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Illimité",
            "className": "is-small remaining-stock",
            "id": "remaining-stock",
          },
          "ref": null,
          "rendered": "Illimité",
          "type": "td",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
