// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | Offer | StockItem | RawStockItem  snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawStockItem
    closeInfo={[Function]}
    dispatch={[Function]}
    formBeginningDatetime={null}
    formBookingLimitDatetime={null}
    formEndDatetime={null}
    hasIban={false}
    history={
        Object {
            "push": [Function],
          }
    }
    isEventStock={false}
    isReadOnly={null}
    offer={null}
    showInfo={[Function]}
    stocks={Array []}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <withRouter(Connect(_Form))
        BlockComponent={null}
        Tag="tr"
        action="/stocks"
        className="stock-item"
        errorsPatch={Object {}}
        failNotification="Formulaire non validé"
        formPatch={Object {}}
        formatPatch={[Function]}
        handleFail={null}
        handleFailNotification={null}
        handleFailRedirect={null}
        handleSuccess={[Function]}
        handleSuccessNotification={null}
        handleSuccessRedirect={null}
        layout="input-only"
        name="stockundefined"
        normalizer={null}
        onEnterKey={null}
        onEscapeKey={null}
        onSubmit={null}
        patch={undefined}
        readOnly={null}
        size="small"
        successNotification="Formulaire non validé"
>
        <EventOrThingFields
                beginningDatetime={null}
                closeInfo={[Function]}
                dispatch={[Function]}
                formPrice={undefined}
                hasIban={false}
                isEventStock={false}
                isReadOnly={null}
                offer={null}
                parseFormChild={[Function]}
                showInfo={[Function]}
                stockFormKey={undefined}
                stockPatch={null}
        />
        <SubmitAndCancelControl
                offer={null}
        />
</withRouter(Connect(_Form))>,
    },
    "ref": [Function],
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "BlockComponent": null,
        "Tag": "tr",
        "action": "/stocks",
        "children": Array [
          false,
          <EventOrThingFields
            beginningDatetime={null}
            closeInfo={[Function]}
            dispatch={[Function]}
            formPrice={undefined}
            hasIban={false}
            isEventStock={false}
            isReadOnly={null}
            offer={null}
            parseFormChild={[Function]}
            showInfo={[Function]}
            stockFormKey={undefined}
            stockPatch={null}
/>,
          <SubmitAndCancelControl
            offer={null}
/>,
        ],
        "className": "stock-item",
        "errorsPatch": Object {},
        "failNotification": "Formulaire non validé",
        "formPatch": Object {},
        "formatPatch": [Function],
        "handleFail": null,
        "handleFailNotification": null,
        "handleFailRedirect": null,
        "handleSuccess": [Function],
        "handleSuccessNotification": null,
        "handleSuccessRedirect": null,
        "layout": "input-only",
        "name": "stockundefined",
        "normalizer": null,
        "onEnterKey": null,
        "onEscapeKey": null,
        "onSubmit": null,
        "patch": undefined,
        "readOnly": null,
        "size": "small",
        "successNotification": "Formulaire non validé",
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "beginningDatetime": null,
            "closeInfo": [Function],
            "dispatch": [Function],
            "formPrice": undefined,
            "hasIban": false,
            "isEventStock": false,
            "isReadOnly": null,
            "offer": null,
            "parseFormChild": [Function],
            "showInfo": [Function],
            "stockFormKey": undefined,
            "stockPatch": null,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "offer": null,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "tbody",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <withRouter(Connect(_Form))
          BlockComponent={null}
          Tag="tr"
          action="/stocks"
          className="stock-item"
          errorsPatch={Object {}}
          failNotification="Formulaire non validé"
          formPatch={Object {}}
          formatPatch={[Function]}
          handleFail={null}
          handleFailNotification={null}
          handleFailRedirect={null}
          handleSuccess={[Function]}
          handleSuccessNotification={null}
          handleSuccessRedirect={null}
          layout="input-only"
          name="stockundefined"
          normalizer={null}
          onEnterKey={null}
          onEscapeKey={null}
          onSubmit={null}
          patch={undefined}
          readOnly={null}
          size="small"
          successNotification="Formulaire non validé"
>
          <EventOrThingFields
                    beginningDatetime={null}
                    closeInfo={[Function]}
                    dispatch={[Function]}
                    formPrice={undefined}
                    hasIban={false}
                    isEventStock={false}
                    isReadOnly={null}
                    offer={null}
                    parseFormChild={[Function]}
                    showInfo={[Function]}
                    stockFormKey={undefined}
                    stockPatch={null}
          />
          <SubmitAndCancelControl
                    offer={null}
          />
</withRouter(Connect(_Form))>,
      },
      "ref": [Function],
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "BlockComponent": null,
          "Tag": "tr",
          "action": "/stocks",
          "children": Array [
            false,
            <EventOrThingFields
              beginningDatetime={null}
              closeInfo={[Function]}
              dispatch={[Function]}
              formPrice={undefined}
              hasIban={false}
              isEventStock={false}
              isReadOnly={null}
              offer={null}
              parseFormChild={[Function]}
              showInfo={[Function]}
              stockFormKey={undefined}
              stockPatch={null}
/>,
            <SubmitAndCancelControl
              offer={null}
/>,
          ],
          "className": "stock-item",
          "errorsPatch": Object {},
          "failNotification": "Formulaire non validé",
          "formPatch": Object {},
          "formatPatch": [Function],
          "handleFail": null,
          "handleFailNotification": null,
          "handleFailRedirect": null,
          "handleSuccess": [Function],
          "handleSuccessNotification": null,
          "handleSuccessRedirect": null,
          "layout": "input-only",
          "name": "stockundefined",
          "normalizer": null,
          "onEnterKey": null,
          "onEscapeKey": null,
          "onSubmit": null,
          "patch": undefined,
          "readOnly": null,
          "size": "small",
          "successNotification": "Formulaire non validé",
        },
        "ref": null,
        "rendered": Array [
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "beginningDatetime": null,
              "closeInfo": [Function],
              "dispatch": [Function],
              "formPrice": undefined,
              "hasIban": false,
              "isEventStock": false,
              "isReadOnly": null,
              "offer": null,
              "parseFormChild": [Function],
              "showInfo": [Function],
              "stockFormKey": undefined,
              "stockPatch": null,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "offer": null,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "tbody",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
