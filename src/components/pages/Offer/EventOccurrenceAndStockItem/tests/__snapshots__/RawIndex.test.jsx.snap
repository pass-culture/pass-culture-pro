// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | Offer | EventOccurrenceAndStockItem | RawEventOccurrenceAndStockItem  snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawEventOccurrenceAndStockItem
    dispatch={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <tr
        className="event-occurrence-and-stock-item"
>
        <DateTimeForm
                beginningDatetime={undefined}
                eventOccurrencePatch={undefined}
                eventOccurrences={Array []}
                history={undefined}
                isEventOccurrenceReadOnly={undefined}
                offer={undefined}
                stockPatch={undefined}
                tz={undefined}
        />
        <Connect(PriceQuantityForm)
                beginningDatetime={undefined}
                closeInfo={undefined}
                formPrice={undefined}
                hasIban={undefined}
                history={undefined}
                isStockOnly={undefined}
                isStockReadOnly={undefined}
                offer={undefined}
                showInfo={undefined}
                stockFormKey={undefined}
                stockPatch={undefined}
        />
        <Connect(EditAndDeleteActions)
                eventOccurrencePatch={undefined}
                isEditing={undefined}
                isStockOnly={undefined}
                offer={undefined}
                stockPatch={undefined}
                tbody={undefined}
        />
</tr>,
    },
    "ref": [Function],
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <DateTimeForm
            beginningDatetime={undefined}
            eventOccurrencePatch={undefined}
            eventOccurrences={Array []}
            history={undefined}
            isEventOccurrenceReadOnly={undefined}
            offer={undefined}
            stockPatch={undefined}
            tz={undefined}
/>,
          <Connect(PriceQuantityForm)
            beginningDatetime={undefined}
            closeInfo={undefined}
            formPrice={undefined}
            hasIban={undefined}
            history={undefined}
            isStockOnly={undefined}
            isStockReadOnly={undefined}
            offer={undefined}
            showInfo={undefined}
            stockFormKey={undefined}
            stockPatch={undefined}
/>,
          <Connect(EditAndDeleteActions)
            eventOccurrencePatch={undefined}
            isEditing={undefined}
            isStockOnly={undefined}
            offer={undefined}
            stockPatch={undefined}
            tbody={undefined}
/>,
        ],
        "className": "event-occurrence-and-stock-item",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "beginningDatetime": undefined,
            "eventOccurrencePatch": undefined,
            "eventOccurrences": Array [],
            "history": undefined,
            "isEventOccurrenceReadOnly": undefined,
            "offer": undefined,
            "stockPatch": undefined,
            "tz": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "beginningDatetime": undefined,
            "closeInfo": undefined,
            "formPrice": undefined,
            "hasIban": undefined,
            "history": undefined,
            "isStockOnly": undefined,
            "isStockReadOnly": undefined,
            "offer": undefined,
            "showInfo": undefined,
            "stockFormKey": undefined,
            "stockPatch": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "eventOccurrencePatch": undefined,
            "isEditing": undefined,
            "isStockOnly": undefined,
            "offer": undefined,
            "stockPatch": undefined,
            "tbody": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "tr",
    },
    "type": "tbody",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <tr
          className="event-occurrence-and-stock-item"
>
          <DateTimeForm
                    beginningDatetime={undefined}
                    eventOccurrencePatch={undefined}
                    eventOccurrences={Array []}
                    history={undefined}
                    isEventOccurrenceReadOnly={undefined}
                    offer={undefined}
                    stockPatch={undefined}
                    tz={undefined}
          />
          <Connect(PriceQuantityForm)
                    beginningDatetime={undefined}
                    closeInfo={undefined}
                    formPrice={undefined}
                    hasIban={undefined}
                    history={undefined}
                    isStockOnly={undefined}
                    isStockReadOnly={undefined}
                    offer={undefined}
                    showInfo={undefined}
                    stockFormKey={undefined}
                    stockPatch={undefined}
          />
          <Connect(EditAndDeleteActions)
                    eventOccurrencePatch={undefined}
                    isEditing={undefined}
                    isStockOnly={undefined}
                    offer={undefined}
                    stockPatch={undefined}
                    tbody={undefined}
          />
</tr>,
      },
      "ref": [Function],
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <DateTimeForm
              beginningDatetime={undefined}
              eventOccurrencePatch={undefined}
              eventOccurrences={Array []}
              history={undefined}
              isEventOccurrenceReadOnly={undefined}
              offer={undefined}
              stockPatch={undefined}
              tz={undefined}
/>,
            <Connect(PriceQuantityForm)
              beginningDatetime={undefined}
              closeInfo={undefined}
              formPrice={undefined}
              hasIban={undefined}
              history={undefined}
              isStockOnly={undefined}
              isStockReadOnly={undefined}
              offer={undefined}
              showInfo={undefined}
              stockFormKey={undefined}
              stockPatch={undefined}
/>,
            <Connect(EditAndDeleteActions)
              eventOccurrencePatch={undefined}
              isEditing={undefined}
              isStockOnly={undefined}
              offer={undefined}
              stockPatch={undefined}
              tbody={undefined}
/>,
          ],
          "className": "event-occurrence-and-stock-item",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "beginningDatetime": undefined,
              "eventOccurrencePatch": undefined,
              "eventOccurrences": Array [],
              "history": undefined,
              "isEventOccurrenceReadOnly": undefined,
              "offer": undefined,
              "stockPatch": undefined,
              "tz": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "beginningDatetime": undefined,
              "closeInfo": undefined,
              "formPrice": undefined,
              "hasIban": undefined,
              "history": undefined,
              "isStockOnly": undefined,
              "isStockReadOnly": undefined,
              "offer": undefined,
              "showInfo": undefined,
              "stockFormKey": undefined,
              "stockPatch": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "eventOccurrencePatch": undefined,
              "isEditing": undefined,
              "isStockOnly": undefined,
              "offer": undefined,
              "stockPatch": undefined,
              "tbody": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "tr",
      },
      "type": "tbody",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
