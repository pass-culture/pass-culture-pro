// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | Offerers | OffererItem | PendingOffererItem snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PendingOffererItem
    offerer={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="list-content"
      >
        <p>
          <span
            className="name"
          />
           (SIREN:
           
          
          )
        </p>
        <p
          className="is-italic mb12"
          id="offerer-item-validation"
        >
          Rattachement en cours de validation
        </p>
      </div>,
      "className": "offerer-item pending",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
            <span
              className="name"
            />
             (SIREN:
             
            
            )
          </p>,
          <p
            className="is-italic mb12"
            id="offerer-item-validation"
          >
            Rattachement en cours de validation
          </p>,
        ],
        "className": "list-content",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="name"
              />,
              " (SIREN:",
              " ",
              "",
              ")",
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "name",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            " (SIREN:",
            " ",
            "",
            ")",
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Rattachement en cours de validation",
            "className": "is-italic mb12",
            "id": "offerer-item-validation",
          },
          "ref": null,
          "rendered": "Rattachement en cours de validation",
          "type": "p",
        },
      ],
      "type": "div",
    },
    "type": "li",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="list-content"
        >
          <p>
            <span
              className="name"
            />
             (SIREN:
             
            
            )
          </p>
          <p
            className="is-italic mb12"
            id="offerer-item-validation"
          >
            Rattachement en cours de validation
          </p>
        </div>,
        "className": "offerer-item pending",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p>
              <span
                className="name"
              />
               (SIREN:
               
              
              )
            </p>,
            <p
              className="is-italic mb12"
              id="offerer-item-validation"
            >
              Rattachement en cours de validation
            </p>,
          ],
          "className": "list-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="name"
                />,
                " (SIREN:",
                " ",
                "",
                ")",
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "name",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              " (SIREN:",
              " ",
              "",
              ")",
            ],
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Rattachement en cours de validation",
              "className": "is-italic mb12",
              "id": "offerer-item-validation",
            },
            "ref": null,
            "rendered": "Rattachement en cours de validation",
            "type": "p",
          },
        ],
        "type": "div",
      },
      "type": "li",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
