// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | Venue | fields | IdentifierFields should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <IdentifierFields
    fieldReadOnlyBecauseFrozenFormSiret={true}
    formSiret="form siret"
    initialSiret="form siret"
    isCreatedEntity={true}
    isModifiedEntity={true}
    readOnly={true}
    venueTypes={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2
          className="main-list-title is-relative"
        >
          Informations lieu
        </h2>,
        <div
          className="field-group"
        >
          <HiddenField
            name="managingOffererId"
            validator={[Function]}
          />
          <div
            className="field text-field is-label-aligned"
          >
            <label
              className="field-label"
              htmlFor="siret"
            >
              <React.Fragment>
                SIRET
                <span
                  className="siret-label-details"
                >
                  <span
                    className="siret-label-bold"
                  >
                     du lieu qui accueille vos offres
                  </span>
                   (si applicable) : 
                </span>
              </React.Fragment>
            </label>
            <TextField
              className="vp-field"
              disabled={false}
              format={[Function]}
              id={null}
              innerClassName={null}
              isDecimal={true}
              label=""
              name="siret"
              parse={null}
              placeholder=""
              readOnly={true}
              renderInner={[Function]}
              renderValue={[Function]}
              required={false}
              type="siret"
              validate={null}
            />
          </div>
          <TextField
            className="vp-field"
            disabled={false}
            format={null}
            id={null}
            innerClassName={null}
            isDecimal={true}
            label="Nom du lieu : "
            name="name"
            parse={null}
            placeholder=""
            readOnly={true}
            renderInner={[Function]}
            renderValue={[Function]}
            required={true}
            type="text"
            validate={null}
          />
          <TextField
            className=""
            disabled={false}
            format={null}
            id={null}
            innerClassName={null}
            isDecimal={true}
            label="Nom d’usage du lieu : "
            name="publicName"
            parse={null}
            placeholder=""
            readOnly={true}
            renderInner={[Function]}
            renderValue={[Function]}
            required={false}
            type="text"
            validate={null}
          />
          <TextField
            className="vp-field"
            disabled={false}
            format={null}
            id={null}
            innerClassName="col-75"
            isDecimal={true}
            label="E-mail : "
            name="bookingEmail"
            parse={null}
            placeholder=""
            readOnly={true}
            renderInner={[Function]}
            renderValue={[Function]}
            required={true}
            type="email"
            validate={null}
          />
          <TextareaField
            autoComplete={false}
            className="vp-field"
            disabled={false}
            label="Commentaire (si pas de SIRET) : "
            maxLength={1000}
            name="comment"
            placeholder=""
            readOnly={true}
            required={false}
            rows={1}
            validate={[Function]}
            validating={false}
          />
          <div
            className="field field-select is-horizontal readonly"
          >
            <div
              className="field-label is-normal"
            >
              <label
                className="label"
                htmlFor="venue-type"
              >
                Type de lieu :
              </label>
            </div>
            <div
              className="field-body"
            >
              <div
                className="control control-select"
              >
                <div
                  className="select is-normal readonly"
                >
                  <Field
                    component="select"
                    disabled={true}
                    id="venue-type"
                    name="venueTypeId"
                  >
                    <option>
                      Choisissez un type de lieu dans la liste
                    </option>
                  </Field>
                </div>
              </div>
            </div>
          </div>
        </div>,
      ],
      "className": "section",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Informations lieu",
            false,
          ],
          "className": "main-list-title is-relative",
        },
        "ref": null,
        "rendered": Array [
          "Informations lieu",
          false,
        ],
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <HiddenField
              name="managingOffererId"
              validator={[Function]}
            />,
            <div
              className="field text-field is-label-aligned"
            >
              <label
                className="field-label"
                htmlFor="siret"
              >
                <React.Fragment>
                  SIRET
                  <span
                    className="siret-label-details"
                  >
                    <span
                      className="siret-label-bold"
                    >
                       du lieu qui accueille vos offres
                    </span>
                     (si applicable) : 
                  </span>
                </React.Fragment>
              </label>
              <TextField
                className="vp-field"
                disabled={false}
                format={[Function]}
                id={null}
                innerClassName={null}
                isDecimal={true}
                label=""
                name="siret"
                parse={null}
                placeholder=""
                readOnly={true}
                renderInner={[Function]}
                renderValue={[Function]}
                required={false}
                type="siret"
                validate={null}
              />
            </div>,
            <TextField
              className="vp-field"
              disabled={false}
              format={null}
              id={null}
              innerClassName={null}
              isDecimal={true}
              label="Nom du lieu : "
              name="name"
              parse={null}
              placeholder=""
              readOnly={true}
              renderInner={[Function]}
              renderValue={[Function]}
              required={true}
              type="text"
              validate={null}
            />,
            <TextField
              className=""
              disabled={false}
              format={null}
              id={null}
              innerClassName={null}
              isDecimal={true}
              label="Nom d’usage du lieu : "
              name="publicName"
              parse={null}
              placeholder=""
              readOnly={true}
              renderInner={[Function]}
              renderValue={[Function]}
              required={false}
              type="text"
              validate={null}
            />,
            <TextField
              className="vp-field"
              disabled={false}
              format={null}
              id={null}
              innerClassName="col-75"
              isDecimal={true}
              label="E-mail : "
              name="bookingEmail"
              parse={null}
              placeholder=""
              readOnly={true}
              renderInner={[Function]}
              renderValue={[Function]}
              required={true}
              type="email"
              validate={null}
            />,
            <TextareaField
              autoComplete={false}
              className="vp-field"
              disabled={false}
              label="Commentaire (si pas de SIRET) : "
              maxLength={1000}
              name="comment"
              placeholder=""
              readOnly={true}
              required={false}
              rows={1}
              validate={[Function]}
              validating={false}
            />,
            <div
              className="field field-select is-horizontal readonly"
            >
              <div
                className="field-label is-normal"
              >
                <label
                  className="label"
                  htmlFor="venue-type"
                >
                  Type de lieu :
                </label>
              </div>
              <div
                className="field-body"
              >
                <div
                  className="control control-select"
                >
                  <div
                    className="select is-normal readonly"
                  >
                    <Field
                      component="select"
                      disabled={true}
                      id="venue-type"
                      name="venueTypeId"
                    >
                      <option>
                        Choisissez un type de lieu dans la liste
                      </option>
                    </Field>
                  </div>
                </div>
              </div>
            </div>,
          ],
          "className": "field-group",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "name": "managingOffererId",
              "validator": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <label
                  className="field-label"
                  htmlFor="siret"
                >
                  <React.Fragment>
                    SIRET
                    <span
                      className="siret-label-details"
                    >
                      <span
                        className="siret-label-bold"
                      >
                         du lieu qui accueille vos offres
                      </span>
                       (si applicable) : 
                    </span>
                  </React.Fragment>
                </label>,
                <TextField
                  className="vp-field"
                  disabled={false}
                  format={[Function]}
                  id={null}
                  innerClassName={null}
                  isDecimal={true}
                  label=""
                  name="siret"
                  parse={null}
                  placeholder=""
                  readOnly={true}
                  renderInner={[Function]}
                  renderValue={[Function]}
                  required={false}
                  type="siret"
                  validate={null}
                />,
              ],
              "className": "field text-field is-label-aligned",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <React.Fragment>
                    SIRET
                    <span
                      className="siret-label-details"
                    >
                      <span
                        className="siret-label-bold"
                      >
                         du lieu qui accueille vos offres
                      </span>
                       (si applicable) : 
                    </span>
                  </React.Fragment>,
                  "className": "field-label",
                  "htmlFor": "siret",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "SIRET",
                      <span
                        className="siret-label-details"
                      >
                        <span
                          className="siret-label-bold"
                        >
                           du lieu qui accueille vos offres
                        </span>
                         (si applicable) : 
                      </span>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    "SIRET",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <span
                            className="siret-label-bold"
                          >
                             du lieu qui accueille vos offres
                          </span>,
                          " (si applicable) : ",
                        ],
                        "className": "siret-label-details",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": " du lieu qui accueille vos offres",
                            "className": "siret-label-bold",
                          },
                          "ref": null,
                          "rendered": " du lieu qui accueille vos offres",
                          "type": "span",
                        },
                        " (si applicable) : ",
                      ],
                      "type": "span",
                    },
                  ],
                  "type": Symbol(react.fragment),
                },
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "vp-field",
                  "disabled": false,
                  "format": [Function],
                  "id": null,
                  "innerClassName": null,
                  "isDecimal": true,
                  "label": "",
                  "name": "siret",
                  "parse": null,
                  "placeholder": "",
                  "readOnly": true,
                  "renderInner": [Function],
                  "renderValue": [Function],
                  "required": false,
                  "type": "siret",
                  "validate": null,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "vp-field",
              "disabled": false,
              "format": null,
              "id": null,
              "innerClassName": null,
              "isDecimal": true,
              "label": "Nom du lieu : ",
              "name": "name",
              "parse": null,
              "placeholder": "",
              "readOnly": true,
              "renderInner": [Function],
              "renderValue": [Function],
              "required": true,
              "type": "text",
              "validate": null,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "",
              "disabled": false,
              "format": null,
              "id": null,
              "innerClassName": null,
              "isDecimal": true,
              "label": "Nom d’usage du lieu : ",
              "name": "publicName",
              "parse": null,
              "placeholder": "",
              "readOnly": true,
              "renderInner": [Function],
              "renderValue": [Function],
              "required": false,
              "type": "text",
              "validate": null,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "vp-field",
              "disabled": false,
              "format": null,
              "id": null,
              "innerClassName": "col-75",
              "isDecimal": true,
              "label": "E-mail : ",
              "name": "bookingEmail",
              "parse": null,
              "placeholder": "",
              "readOnly": true,
              "renderInner": [Function],
              "renderValue": [Function],
              "required": true,
              "type": "email",
              "validate": null,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "autoComplete": false,
              "className": "vp-field",
              "disabled": false,
              "label": "Commentaire (si pas de SIRET) : ",
              "maxLength": 1000,
              "name": "comment",
              "placeholder": "",
              "readOnly": true,
              "required": false,
              "rows": 1,
              "validate": [Function],
              "validating": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="field-label is-normal"
                >
                  <label
                    className="label"
                    htmlFor="venue-type"
                  >
                    Type de lieu :
                  </label>
                </div>,
                <div
                  className="field-body"
                >
                  <div
                    className="control control-select"
                  >
                    <div
                      className="select is-normal readonly"
                    >
                      <Field
                        component="select"
                        disabled={true}
                        id="venue-type"
                        name="venueTypeId"
                      >
                        <option>
                          Choisissez un type de lieu dans la liste
                        </option>
                      </Field>
                    </div>
                  </div>
                </div>,
              ],
              "className": "field field-select is-horizontal readonly",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <label
                    className="label"
                    htmlFor="venue-type"
                  >
                    Type de lieu :
                  </label>,
                  "className": "field-label is-normal",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Type de lieu :",
                    "className": "label",
                    "htmlFor": "venue-type",
                  },
                  "ref": null,
                  "rendered": "Type de lieu :",
                  "type": "label",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="control control-select"
                  >
                    <div
                      className="select is-normal readonly"
                    >
                      <Field
                        component="select"
                        disabled={true}
                        id="venue-type"
                        name="venueTypeId"
                      >
                        <option>
                          Choisissez un type de lieu dans la liste
                        </option>
                      </Field>
                    </div>
                  </div>,
                  "className": "field-body",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <div
                      className="select is-normal readonly"
                    >
                      <Field
                        component="select"
                        disabled={true}
                        id="venue-type"
                        name="venueTypeId"
                      >
                        <option>
                          Choisissez un type de lieu dans la liste
                        </option>
                      </Field>
                    </div>,
                    "className": "control control-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <Field
                        component="select"
                        disabled={true}
                        id="venue-type"
                        name="venueTypeId"
                      >
                        <option>
                          Choisissez un type de lieu dans la liste
                        </option>
                      </Field>,
                      "className": "select is-normal readonly",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "children": Array [
                          <option>
                            Choisissez un type de lieu dans la liste
                          </option>,
                          Array [],
                        ],
                        "component": "select",
                        "disabled": true,
                        "id": "venue-type",
                        "name": "venueTypeId",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Choisissez un type de lieu dans la liste",
                          },
                          "ref": null,
                          "rendered": "Choisissez un type de lieu dans la liste",
                          "type": "option",
                        },
                      ],
                      "type": [Function],
                    },
                    "type": "div",
                  },
                  "type": "div",
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2
            className="main-list-title is-relative"
          >
            Informations lieu
          </h2>,
          <div
            className="field-group"
          >
            <HiddenField
              name="managingOffererId"
              validator={[Function]}
            />
            <div
              className="field text-field is-label-aligned"
            >
              <label
                className="field-label"
                htmlFor="siret"
              >
                <React.Fragment>
                  SIRET
                  <span
                    className="siret-label-details"
                  >
                    <span
                      className="siret-label-bold"
                    >
                       du lieu qui accueille vos offres
                    </span>
                     (si applicable) : 
                  </span>
                </React.Fragment>
              </label>
              <TextField
                className="vp-field"
                disabled={false}
                format={[Function]}
                id={null}
                innerClassName={null}
                isDecimal={true}
                label=""
                name="siret"
                parse={null}
                placeholder=""
                readOnly={true}
                renderInner={[Function]}
                renderValue={[Function]}
                required={false}
                type="siret"
                validate={null}
              />
            </div>
            <TextField
              className="vp-field"
              disabled={false}
              format={null}
              id={null}
              innerClassName={null}
              isDecimal={true}
              label="Nom du lieu : "
              name="name"
              parse={null}
              placeholder=""
              readOnly={true}
              renderInner={[Function]}
              renderValue={[Function]}
              required={true}
              type="text"
              validate={null}
            />
            <TextField
              className=""
              disabled={false}
              format={null}
              id={null}
              innerClassName={null}
              isDecimal={true}
              label="Nom d’usage du lieu : "
              name="publicName"
              parse={null}
              placeholder=""
              readOnly={true}
              renderInner={[Function]}
              renderValue={[Function]}
              required={false}
              type="text"
              validate={null}
            />
            <TextField
              className="vp-field"
              disabled={false}
              format={null}
              id={null}
              innerClassName="col-75"
              isDecimal={true}
              label="E-mail : "
              name="bookingEmail"
              parse={null}
              placeholder=""
              readOnly={true}
              renderInner={[Function]}
              renderValue={[Function]}
              required={true}
              type="email"
              validate={null}
            />
            <TextareaField
              autoComplete={false}
              className="vp-field"
              disabled={false}
              label="Commentaire (si pas de SIRET) : "
              maxLength={1000}
              name="comment"
              placeholder=""
              readOnly={true}
              required={false}
              rows={1}
              validate={[Function]}
              validating={false}
            />
            <div
              className="field field-select is-horizontal readonly"
            >
              <div
                className="field-label is-normal"
              >
                <label
                  className="label"
                  htmlFor="venue-type"
                >
                  Type de lieu :
                </label>
              </div>
              <div
                className="field-body"
              >
                <div
                  className="control control-select"
                >
                  <div
                    className="select is-normal readonly"
                  >
                    <Field
                      component="select"
                      disabled={true}
                      id="venue-type"
                      name="venueTypeId"
                    >
                      <option>
                        Choisissez un type de lieu dans la liste
                      </option>
                    </Field>
                  </div>
                </div>
              </div>
            </div>
          </div>,
        ],
        "className": "section",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Informations lieu",
              false,
            ],
            "className": "main-list-title is-relative",
          },
          "ref": null,
          "rendered": Array [
            "Informations lieu",
            false,
          ],
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <HiddenField
                name="managingOffererId"
                validator={[Function]}
              />,
              <div
                className="field text-field is-label-aligned"
              >
                <label
                  className="field-label"
                  htmlFor="siret"
                >
                  <React.Fragment>
                    SIRET
                    <span
                      className="siret-label-details"
                    >
                      <span
                        className="siret-label-bold"
                      >
                         du lieu qui accueille vos offres
                      </span>
                       (si applicable) : 
                    </span>
                  </React.Fragment>
                </label>
                <TextField
                  className="vp-field"
                  disabled={false}
                  format={[Function]}
                  id={null}
                  innerClassName={null}
                  isDecimal={true}
                  label=""
                  name="siret"
                  parse={null}
                  placeholder=""
                  readOnly={true}
                  renderInner={[Function]}
                  renderValue={[Function]}
                  required={false}
                  type="siret"
                  validate={null}
                />
              </div>,
              <TextField
                className="vp-field"
                disabled={false}
                format={null}
                id={null}
                innerClassName={null}
                isDecimal={true}
                label="Nom du lieu : "
                name="name"
                parse={null}
                placeholder=""
                readOnly={true}
                renderInner={[Function]}
                renderValue={[Function]}
                required={true}
                type="text"
                validate={null}
              />,
              <TextField
                className=""
                disabled={false}
                format={null}
                id={null}
                innerClassName={null}
                isDecimal={true}
                label="Nom d’usage du lieu : "
                name="publicName"
                parse={null}
                placeholder=""
                readOnly={true}
                renderInner={[Function]}
                renderValue={[Function]}
                required={false}
                type="text"
                validate={null}
              />,
              <TextField
                className="vp-field"
                disabled={false}
                format={null}
                id={null}
                innerClassName="col-75"
                isDecimal={true}
                label="E-mail : "
                name="bookingEmail"
                parse={null}
                placeholder=""
                readOnly={true}
                renderInner={[Function]}
                renderValue={[Function]}
                required={true}
                type="email"
                validate={null}
              />,
              <TextareaField
                autoComplete={false}
                className="vp-field"
                disabled={false}
                label="Commentaire (si pas de SIRET) : "
                maxLength={1000}
                name="comment"
                placeholder=""
                readOnly={true}
                required={false}
                rows={1}
                validate={[Function]}
                validating={false}
              />,
              <div
                className="field field-select is-horizontal readonly"
              >
                <div
                  className="field-label is-normal"
                >
                  <label
                    className="label"
                    htmlFor="venue-type"
                  >
                    Type de lieu :
                  </label>
                </div>
                <div
                  className="field-body"
                >
                  <div
                    className="control control-select"
                  >
                    <div
                      className="select is-normal readonly"
                    >
                      <Field
                        component="select"
                        disabled={true}
                        id="venue-type"
                        name="venueTypeId"
                      >
                        <option>
                          Choisissez un type de lieu dans la liste
                        </option>
                      </Field>
                    </div>
                  </div>
                </div>
              </div>,
            ],
            "className": "field-group",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "name": "managingOffererId",
                "validator": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <label
                    className="field-label"
                    htmlFor="siret"
                  >
                    <React.Fragment>
                      SIRET
                      <span
                        className="siret-label-details"
                      >
                        <span
                          className="siret-label-bold"
                        >
                           du lieu qui accueille vos offres
                        </span>
                         (si applicable) : 
                      </span>
                    </React.Fragment>
                  </label>,
                  <TextField
                    className="vp-field"
                    disabled={false}
                    format={[Function]}
                    id={null}
                    innerClassName={null}
                    isDecimal={true}
                    label=""
                    name="siret"
                    parse={null}
                    placeholder=""
                    readOnly={true}
                    renderInner={[Function]}
                    renderValue={[Function]}
                    required={false}
                    type="siret"
                    validate={null}
                  />,
                ],
                "className": "field text-field is-label-aligned",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <React.Fragment>
                      SIRET
                      <span
                        className="siret-label-details"
                      >
                        <span
                          className="siret-label-bold"
                        >
                           du lieu qui accueille vos offres
                        </span>
                         (si applicable) : 
                      </span>
                    </React.Fragment>,
                    "className": "field-label",
                    "htmlFor": "siret",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        "SIRET",
                        <span
                          className="siret-label-details"
                        >
                          <span
                            className="siret-label-bold"
                          >
                             du lieu qui accueille vos offres
                          </span>
                           (si applicable) : 
                        </span>,
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      "SIRET",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <span
                              className="siret-label-bold"
                            >
                               du lieu qui accueille vos offres
                            </span>,
                            " (si applicable) : ",
                          ],
                          "className": "siret-label-details",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": " du lieu qui accueille vos offres",
                              "className": "siret-label-bold",
                            },
                            "ref": null,
                            "rendered": " du lieu qui accueille vos offres",
                            "type": "span",
                          },
                          " (si applicable) : ",
                        ],
                        "type": "span",
                      },
                    ],
                    "type": Symbol(react.fragment),
                  },
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "vp-field",
                    "disabled": false,
                    "format": [Function],
                    "id": null,
                    "innerClassName": null,
                    "isDecimal": true,
                    "label": "",
                    "name": "siret",
                    "parse": null,
                    "placeholder": "",
                    "readOnly": true,
                    "renderInner": [Function],
                    "renderValue": [Function],
                    "required": false,
                    "type": "siret",
                    "validate": null,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "vp-field",
                "disabled": false,
                "format": null,
                "id": null,
                "innerClassName": null,
                "isDecimal": true,
                "label": "Nom du lieu : ",
                "name": "name",
                "parse": null,
                "placeholder": "",
                "readOnly": true,
                "renderInner": [Function],
                "renderValue": [Function],
                "required": true,
                "type": "text",
                "validate": null,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "",
                "disabled": false,
                "format": null,
                "id": null,
                "innerClassName": null,
                "isDecimal": true,
                "label": "Nom d’usage du lieu : ",
                "name": "publicName",
                "parse": null,
                "placeholder": "",
                "readOnly": true,
                "renderInner": [Function],
                "renderValue": [Function],
                "required": false,
                "type": "text",
                "validate": null,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "vp-field",
                "disabled": false,
                "format": null,
                "id": null,
                "innerClassName": "col-75",
                "isDecimal": true,
                "label": "E-mail : ",
                "name": "bookingEmail",
                "parse": null,
                "placeholder": "",
                "readOnly": true,
                "renderInner": [Function],
                "renderValue": [Function],
                "required": true,
                "type": "email",
                "validate": null,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "autoComplete": false,
                "className": "vp-field",
                "disabled": false,
                "label": "Commentaire (si pas de SIRET) : ",
                "maxLength": 1000,
                "name": "comment",
                "placeholder": "",
                "readOnly": true,
                "required": false,
                "rows": 1,
                "validate": [Function],
                "validating": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="field-label is-normal"
                  >
                    <label
                      className="label"
                      htmlFor="venue-type"
                    >
                      Type de lieu :
                    </label>
                  </div>,
                  <div
                    className="field-body"
                  >
                    <div
                      className="control control-select"
                    >
                      <div
                        className="select is-normal readonly"
                      >
                        <Field
                          component="select"
                          disabled={true}
                          id="venue-type"
                          name="venueTypeId"
                        >
                          <option>
                            Choisissez un type de lieu dans la liste
                          </option>
                        </Field>
                      </div>
                    </div>
                  </div>,
                ],
                "className": "field field-select is-horizontal readonly",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <label
                      className="label"
                      htmlFor="venue-type"
                    >
                      Type de lieu :
                    </label>,
                    "className": "field-label is-normal",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Type de lieu :",
                      "className": "label",
                      "htmlFor": "venue-type",
                    },
                    "ref": null,
                    "rendered": "Type de lieu :",
                    "type": "label",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <div
                      className="control control-select"
                    >
                      <div
                        className="select is-normal readonly"
                      >
                        <Field
                          component="select"
                          disabled={true}
                          id="venue-type"
                          name="venueTypeId"
                        >
                          <option>
                            Choisissez un type de lieu dans la liste
                          </option>
                        </Field>
                      </div>
                    </div>,
                    "className": "field-body",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <div
                        className="select is-normal readonly"
                      >
                        <Field
                          component="select"
                          disabled={true}
                          id="venue-type"
                          name="venueTypeId"
                        >
                          <option>
                            Choisissez un type de lieu dans la liste
                          </option>
                        </Field>
                      </div>,
                      "className": "control control-select",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <Field
                          component="select"
                          disabled={true}
                          id="venue-type"
                          name="venueTypeId"
                        >
                          <option>
                            Choisissez un type de lieu dans la liste
                          </option>
                        </Field>,
                        "className": "select is-normal readonly",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "children": Array [
                            <option>
                              Choisissez un type de lieu dans la liste
                            </option>,
                            Array [],
                          ],
                          "component": "select",
                          "disabled": true,
                          "id": "venue-type",
                          "name": "venueTypeId",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "Choisissez un type de lieu dans la liste",
                            },
                            "ref": null,
                            "rendered": "Choisissez un type de lieu dans la liste",
                            "type": "option",
                          },
                        ],
                        "type": [Function],
                      },
                      "type": "div",
                    },
                    "type": "div",
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
