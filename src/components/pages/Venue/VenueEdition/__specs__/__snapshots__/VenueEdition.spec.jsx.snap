// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | Venue should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <VenueEdition
    handleInitialRequest={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    handleSubmitRequest={[MockFunction]}
    handleSubmitRequestFail={[MockFunction]}
    handleSubmitRequestSuccess={[MockFunction]}
    history={
      Object {
        "location": Object {
          "pathname": "/fake",
        },
        "push": [MockFunction],
      }
    }
    match={
      Object {
        "params": Object {
          "offererId": "APEQ",
          "venueId": "AQYQ",
        },
      }
    }
    offerer={
      Object {
        "id": "BQ",
        "name": "Maison du chocolat",
      }
    }
    query={
      Object {
        "changeToReadOnly": [MockFunction],
        "context": [MockFunction],
      }
    }
    trackCreateVenue={[MockFunction]}
    trackModifyVenue={[MockFunction]}
    venue={
      Object {
        "id": "CM",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "backTo": Object {
        "label": "Maison du chocolat",
        "path": "/structures/APEQ",
      },
      "children": Array [
        <Titles
          action={
            <NavLink
              activeClassName="active"
              aria-current="page"
              className="cta button is-primary"
              id="action-create-offer"
              to="/offres/creation?lieu=CM&structure=APEQ"
            >
              <span
                className="icon"
              >
                <Icon
                  png={null}
                  svg="ico-offres-w"
                />
              </span>
              <span>
                Créer une offre
              </span>
            </NavLink>
          }
          subtitle={null}
          title="Lieu"
        />,
        <withRouter(Connect(VenueProvidersManager))
          venue={
            Object {
              "id": "CM",
            }
          }
        />,
        <ReactFinalForm
          decorators={
            Array [
              [Function],
              [Function],
            ]
          }
          initialValues={
            Object {
              "id": "CM",
            }
          }
          name="venue"
          onSubmit={[Function]}
          render={[Function]}
        />,
      ],
      "handleDataRequest": [Function],
      "name": "venue",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "action": <NavLink
            activeClassName="active"
            aria-current="page"
            className="cta button is-primary"
            id="action-create-offer"
            to="/offres/creation?lieu=CM&structure=APEQ"
          >
            <span
              className="icon"
            >
              <Icon
                png={null}
                svg="ico-offres-w"
              />
            </span>
            <span>
              Créer une offre
            </span>
          </NavLink>,
          "subtitle": null,
          "title": "Lieu",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "venue": Object {
            "id": "CM",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "decorators": Array [
            [Function],
            [Function],
          ],
          "initialValues": Object {
            "id": "CM",
          },
          "name": "venue",
          "onSubmit": [Function],
          "render": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "backTo": Object {
          "label": "Maison du chocolat",
          "path": "/structures/APEQ",
        },
        "children": Array [
          <Titles
            action={
              <NavLink
                activeClassName="active"
                aria-current="page"
                className="cta button is-primary"
                id="action-create-offer"
                to="/offres/creation?lieu=CM&structure=APEQ"
              >
                <span
                  className="icon"
                >
                  <Icon
                    png={null}
                    svg="ico-offres-w"
                  />
                </span>
                <span>
                  Créer une offre
                </span>
              </NavLink>
            }
            subtitle={null}
            title="Lieu"
          />,
          <withRouter(Connect(VenueProvidersManager))
            venue={
              Object {
                "id": "CM",
              }
            }
          />,
          <ReactFinalForm
            decorators={
              Array [
                [Function],
                [Function],
              ]
            }
            initialValues={
              Object {
                "id": "CM",
              }
            }
            name="venue"
            onSubmit={[Function]}
            render={[Function]}
          />,
        ],
        "handleDataRequest": [Function],
        "name": "venue",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "action": <NavLink
              activeClassName="active"
              aria-current="page"
              className="cta button is-primary"
              id="action-create-offer"
              to="/offres/creation?lieu=CM&structure=APEQ"
            >
              <span
                className="icon"
              >
                <Icon
                  png={null}
                  svg="ico-offres-w"
                />
              </span>
              <span>
                Créer une offre
              </span>
            </NavLink>,
            "subtitle": null,
            "title": "Lieu",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "venue": Object {
              "id": "CM",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "decorators": Array [
              [Function],
              [Function],
            ],
            "initialValues": Object {
              "id": "CM",
            },
            "name": "venue",
            "onSubmit": [Function],
            "render": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
