// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | Venue | VenueProvidersManager | VenueProviderItem should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <VenueProviderItem
    venueProvider={
      Object {
        "id": 1,
        "isActive": true,
        "lastSyncDate": "2018-01-01",
        "nOffers": 1,
        "provider": Object {
          "localClass": "OpenAgendaEvents",
          "name": "fake local class",
        },
        "venueId": 1,
        "venueIdAtOfferProvider": "fake id",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Icon
          svg="logo-openAgenda"
        />,
        <div
          className="has-text-weight-bold fs14 provider-name-container"
        >
          fake local class
        </div>,
        <div
          className="fs14 venue-id-at-offer-provider-container"
        >
          <div>
            Compte : 
            <strong
              className="fs14 has-text-weight-bold"
            >
              fake id
            </strong>
          </div>
        </div>,
        <div
          className="offers-container"
        >
          <NavLink
            activeClassName="active"
            aria-current="page"
            className="has-text-primary"
            to="/offres?lieu=1"
          >
            <Icon
              height="22px"
              svg="ico-offres-r"
              width="22px"
            />
            <div
              className="number-of-offers-label"
            >
              1 offre
            </div>
          </NavLink>
        </div>,
      ],
      "className": "venue-provider-row",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "svg": "logo-openAgenda",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "fake local class",
          "className": "has-text-weight-bold fs14 provider-name-container",
        },
        "ref": null,
        "rendered": "fake local class",
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div>
            Compte : 
            <strong
              className="fs14 has-text-weight-bold"
            >
              fake id
            </strong>
          </div>,
          "className": "fs14 venue-id-at-offer-provider-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Compte : ",
              <strong
                className="fs14 has-text-weight-bold"
              >
                fake id
              </strong>,
              false,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Compte : ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "fake id",
                "className": "fs14 has-text-weight-bold",
              },
              "ref": null,
              "rendered": "fake id",
              "type": "strong",
            },
            false,
          ],
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <NavLink
            activeClassName="active"
            aria-current="page"
            className="has-text-primary"
            to="/offres?lieu=1"
          >
            <Icon
              height="22px"
              svg="ico-offres-r"
              width="22px"
            />
            <div
              className="number-of-offers-label"
            >
              1 offre
            </div>
          </NavLink>,
          "className": "offers-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "aria-current": "page",
            "children": Array [
              <Icon
                height="22px"
                svg="ico-offres-r"
                width="22px"
              />,
              <div
                className="number-of-offers-label"
              >
                1 offre
              </div>,
            ],
            "className": "has-text-primary",
            "to": "/offres?lieu=1",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "height": "22px",
                "svg": "ico-offres-r",
                "width": "22px",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "1 offre",
                "className": "number-of-offers-label",
              },
              "ref": null,
              "rendered": "1 offre",
              "type": "div",
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "li",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Icon
            svg="logo-openAgenda"
          />,
          <div
            className="has-text-weight-bold fs14 provider-name-container"
          >
            fake local class
          </div>,
          <div
            className="fs14 venue-id-at-offer-provider-container"
          >
            <div>
              Compte : 
              <strong
                className="fs14 has-text-weight-bold"
              >
                fake id
              </strong>
            </div>
          </div>,
          <div
            className="offers-container"
          >
            <NavLink
              activeClassName="active"
              aria-current="page"
              className="has-text-primary"
              to="/offres?lieu=1"
            >
              <Icon
                height="22px"
                svg="ico-offres-r"
                width="22px"
              />
              <div
                className="number-of-offers-label"
              >
                1 offre
              </div>
            </NavLink>
          </div>,
        ],
        "className": "venue-provider-row",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "svg": "logo-openAgenda",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "fake local class",
            "className": "has-text-weight-bold fs14 provider-name-container",
          },
          "ref": null,
          "rendered": "fake local class",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div>
              Compte : 
              <strong
                className="fs14 has-text-weight-bold"
              >
                fake id
              </strong>
            </div>,
            "className": "fs14 venue-id-at-offer-provider-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Compte : ",
                <strong
                  className="fs14 has-text-weight-bold"
                >
                  fake id
                </strong>,
                false,
              ],
            },
            "ref": null,
            "rendered": Array [
              "Compte : ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "fake id",
                  "className": "fs14 has-text-weight-bold",
                },
                "ref": null,
                "rendered": "fake id",
                "type": "strong",
              },
              false,
            ],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <NavLink
              activeClassName="active"
              aria-current="page"
              className="has-text-primary"
              to="/offres?lieu=1"
            >
              <Icon
                height="22px"
                svg="ico-offres-r"
                width="22px"
              />
              <div
                className="number-of-offers-label"
              >
                1 offre
              </div>
            </NavLink>,
            "className": "offers-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "activeClassName": "active",
              "aria-current": "page",
              "children": Array [
                <Icon
                  height="22px"
                  svg="ico-offres-r"
                  width="22px"
                />,
                <div
                  className="number-of-offers-label"
                >
                  1 offre
                </div>,
              ],
              "className": "has-text-primary",
              "to": "/offres?lieu=1",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "height": "22px",
                  "svg": "ico-offres-r",
                  "width": "22px",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "1 offre",
                  "className": "number-of-offers-label",
                },
                "ref": null,
                "rendered": "1 offre",
                "type": "div",
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "li",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
