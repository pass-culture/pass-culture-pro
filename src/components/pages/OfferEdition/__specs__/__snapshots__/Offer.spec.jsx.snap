// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components | OfferEdition | Offer  should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Offer
    currentUser={
      Object {
        "isAdmin": false,
      }
    }
    dispatch={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "type": "RESET_FORM",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    formInitialValues={
      Object {
        "isDuo": false,
      }
    }
    history={
      Object {
        "push": [MockFunction],
      }
    }
    isEditableOffer={true}
    loadVenue={[MockFunction]}
    location={
      Object {
        "search": "?lieu=AQ",
      }
    }
    match={
      Object {
        "params": Object {
          "offerId": "creation",
        },
      }
    }
    mergeOfferError={[MockFunction]}
    offer={
      Object {
        "id": "SN",
        "lastProvider": null,
        "name": "Super Livre",
      }
    }
    query={
      Object {
        "change": [Function],
        "changeToReadOnly": [Function],
        "context": [Function],
        "parse": [Function],
        "translate": [Function],
      }
    }
    selectedOfferType={Object {}}
    trackCreateOffer={[MockFunction]}
    trackModifyOffer={[MockFunction]}
    venuesMatchingOfferType={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "backTo": Object {
        "label": "Vos offres",
        "path": "/offres",
      },
      "children": Array [
        <HeroSection
          subtitle="Super Livre"
          title="Détails de l’offre"
        >
          <p
            className="subtitle"
          >
            Renseignez les détails de cette offre, puis mettez-la en avant en ajoutant une ou plusieurs accroches.
          </p>
        </HeroSection>,
        <withRouter(Connect(_Form))
          BlockComponent={null}
          Tag={null}
          action="/offers/SN"
          className={null}
          errorsPatch={Object {}}
          failNotification="Formulaire non validé"
          formPatch={Object {}}
          formatPatch={[Function]}
          handleFail={null}
          handleFailNotification={null}
          handleFailRedirect={null}
          handleSuccess={[Function]}
          handleSuccessNotification={null}
          handleSuccessRedirect={null}
          method="PATCH"
          name="offer"
          normalizer={null}
          onEnterKey={null}
          onEscapeKey={null}
          onSubmit={null}
          patch={
            Object {
              "isDuo": false,
            }
          }
          successNotification="Formulaire non validé"
        >
          <div
            className="field-group offer-form"
          >
            <Field
              displayValue={[Function]}
              errors={null}
              isExpanded={true}
              label="Titre de l’offre"
              layout="horizontal"
              name="name"
              readOnly={false}
              required={true}
              size="normal"
              storeValue={[Function]}
            />
            <Field
              displayValue={[Function]}
              errors={null}
              label="Type"
              layout="horizontal"
              name="type"
              optionLabel="proLabel"
              optionValue="value"
              placeholder="Sélectionnez un type d’offre"
              readOnly={Object {}}
              required={true}
              size="normal"
              storeValue={[Function]}
              sublabel="Le type d’offre ne peut pas être modifié une fois l’offre enregistrée."
              type="select"
            />
            <div
              className="field is-horizontal field-text"
            >
              <div
                className="field-label"
              >
                <label
                  className="label"
                  htmlFor="input_offers_name"
                >
                  <div
                    className="subtitle"
                  >
                    Stocks :
                  </div>
                </label>
              </div>
              <div
                className="field-body"
              >
                <div
                  className="control"
                  style={
                    Object {
                      "paddingTop": "0.25rem",
                    }
                  }
                >
                  <span
                    className="nb-dates"
                    style={
                      Object {
                        "paddingTop": "0.25rem",
                      }
                    }
                  >
                    undefined stock
                  </span>
                  <button
                    className="button is-primary is-outlined is-small manage-stock"
                    disabled=""
                    id="manage-stocks"
                    onClick={[Function]}
                    type="button"
                  >
                    <span
                      className="icon"
                    >
                      <Icon
                        svg="ico-calendar"
                      />
                    </span>
                    <span>
                      Gérer les stocks
                    </span>
                  </button>
                </div>
              </div>
            </div>
          </div>
          <withRouter(Connect(MediationsManager)) />
          <div>
            <h2
              className="main-list-title"
            >
              Infos pratiques
            </h2>
            <div
              className="field-group"
            />
            <div
              className="field-group"
            >
              <Field
                displayValue={[Function]}
                errors={null}
                label="Email auquel envoyer les réservations"
                layout="horizontal"
                name="bookingEmail"
                readOnly={false}
                size="normal"
                storeValue={[Function]}
                sublabel="Merci de laisser ce champ vide si vous ne souhaitez pas recevoir d’email lors des réservations"
                type="email"
              />
            </div>
            <h2
              className="main-list-title"
            >
              Infos artistiques
            </h2>
            <div
              className="field-group"
            >
              <Field
                displayMaxLength={true}
                displayValue={[Function]}
                errors={null}
                isExpanded={true}
                label="Description"
                layout="horizontal"
                maxLength={1000}
                name="description"
                readOnly={false}
                rows={5}
                size="normal"
                storeValue={[Function]}
                type="textarea"
              />
            </div>
          </div>
          <hr />
          <div
            className="field is-grouped is-grouped-centered"
            style={
              Object {
                "justifyContent": "space-between",
              }
            }
          >
            <div
              className="control"
            >
              <Link
                className="button is-secondary is-medium"
                id="cancel-button"
                replace={false}
                to="/offres/SN"
                type="button"
              >
                Annuler
              </Link>
            </div>
            <div
              className="control"
            >
              <SubmitButton
                className="button is-primary is-medium"
                getDisabled={[Function]}
                getTitle={[Function]}
                requiredFields={Array []}
                type="submit"
              >
                Enregistrer
              </SubmitButton>
            </div>
          </div>
        </withRouter(Connect(_Form))>,
      ],
      "handleDataRequest": [Function],
      "id": "offer",
      "name": "offer",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            undefined,
            <p
              className="subtitle"
            >
              Renseignez les détails de cette offre, puis mettez-la en avant en ajoutant une ou plusieurs accroches.
            </p>,
          ],
          "subtitle": "Super Livre",
          "title": "Détails de l’offre",
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Renseignez les détails de cette offre, puis mettez-la en avant en ajoutant une ou plusieurs accroches.",
              "className": "subtitle",
            },
            "ref": null,
            "rendered": "Renseignez les détails de cette offre, puis mettez-la en avant en ajoutant une ou plusieurs accroches.",
            "type": "p",
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "BlockComponent": null,
          "Tag": null,
          "action": "/offers/SN",
          "children": Array [
            <div
              className="field-group offer-form"
            >
              <Field
                displayValue={[Function]}
                errors={null}
                isExpanded={true}
                label="Titre de l’offre"
                layout="horizontal"
                name="name"
                readOnly={false}
                required={true}
                size="normal"
                storeValue={[Function]}
              />
              <Field
                displayValue={[Function]}
                errors={null}
                label="Type"
                layout="horizontal"
                name="type"
                optionLabel="proLabel"
                optionValue="value"
                placeholder="Sélectionnez un type d’offre"
                readOnly={Object {}}
                required={true}
                size="normal"
                storeValue={[Function]}
                sublabel="Le type d’offre ne peut pas être modifié une fois l’offre enregistrée."
                type="select"
              />
              <div
                className="field is-horizontal field-text"
              >
                <div
                  className="field-label"
                >
                  <label
                    className="label"
                    htmlFor="input_offers_name"
                  >
                    <div
                      className="subtitle"
                    >
                      Stocks :
                    </div>
                  </label>
                </div>
                <div
                  className="field-body"
                >
                  <div
                    className="control"
                    style={
                      Object {
                        "paddingTop": "0.25rem",
                      }
                    }
                  >
                    <span
                      className="nb-dates"
                      style={
                        Object {
                          "paddingTop": "0.25rem",
                        }
                      }
                    >
                      undefined stock
                    </span>
                    <button
                      className="button is-primary is-outlined is-small manage-stock"
                      disabled=""
                      id="manage-stocks"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="icon"
                      >
                        <Icon
                          svg="ico-calendar"
                        />
                      </span>
                      <span>
                        Gérer les stocks
                      </span>
                    </button>
                  </div>
                </div>
              </div>
            </div>,
            false,
            <withRouter(Connect(MediationsManager)) />,
            <div>
              <h2
                className="main-list-title"
              >
                Infos pratiques
              </h2>
              <div
                className="field-group"
              />
              <div
                className="field-group"
              >
                <Field
                  displayValue={[Function]}
                  errors={null}
                  label="Email auquel envoyer les réservations"
                  layout="horizontal"
                  name="bookingEmail"
                  readOnly={false}
                  size="normal"
                  storeValue={[Function]}
                  sublabel="Merci de laisser ce champ vide si vous ne souhaitez pas recevoir d’email lors des réservations"
                  type="email"
                />
              </div>
              <h2
                className="main-list-title"
              >
                Infos artistiques
              </h2>
              <div
                className="field-group"
              >
                <Field
                  displayMaxLength={true}
                  displayValue={[Function]}
                  errors={null}
                  isExpanded={true}
                  label="Description"
                  layout="horizontal"
                  maxLength={1000}
                  name="description"
                  readOnly={false}
                  rows={5}
                  size="normal"
                  storeValue={[Function]}
                  type="textarea"
                />
              </div>
            </div>,
            <hr />,
            <div
              className="field is-grouped is-grouped-centered"
              style={
                Object {
                  "justifyContent": "space-between",
                }
              }
            >
              <div
                className="control"
              >
                <Link
                  className="button is-secondary is-medium"
                  id="cancel-button"
                  replace={false}
                  to="/offres/SN"
                  type="button"
                >
                  Annuler
                </Link>
              </div>
              <div
                className="control"
              >
                <SubmitButton
                  className="button is-primary is-medium"
                  getDisabled={[Function]}
                  getTitle={[Function]}
                  requiredFields={Array []}
                  type="submit"
                >
                  Enregistrer
                </SubmitButton>
              </div>
            </div>,
          ],
          "className": null,
          "errorsPatch": Object {},
          "failNotification": "Formulaire non validé",
          "formPatch": Object {},
          "formatPatch": [Function],
          "handleFail": null,
          "handleFailNotification": null,
          "handleFailRedirect": null,
          "handleSuccess": [Function],
          "handleSuccessNotification": null,
          "handleSuccessRedirect": null,
          "method": "PATCH",
          "name": "offer",
          "normalizer": null,
          "onEnterKey": null,
          "onEscapeKey": null,
          "onSubmit": null,
          "patch": Object {
            "isDuo": false,
          },
          "successNotification": "Formulaire non validé",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Field
                  displayValue={[Function]}
                  errors={null}
                  isExpanded={true}
                  label="Titre de l’offre"
                  layout="horizontal"
                  name="name"
                  readOnly={false}
                  required={true}
                  size="normal"
                  storeValue={[Function]}
                />,
                <Field
                  displayValue={[Function]}
                  errors={null}
                  label="Type"
                  layout="horizontal"
                  name="type"
                  optionLabel="proLabel"
                  optionValue="value"
                  placeholder="Sélectionnez un type d’offre"
                  readOnly={Object {}}
                  required={true}
                  size="normal"
                  storeValue={[Function]}
                  sublabel="Le type d’offre ne peut pas être modifié une fois l’offre enregistrée."
                  type="select"
                />,
                false,
                false,
                <div
                  className="field is-horizontal field-text"
                >
                  <div
                    className="field-label"
                  >
                    <label
                      className="label"
                      htmlFor="input_offers_name"
                    >
                      <div
                        className="subtitle"
                      >
                        Stocks :
                      </div>
                    </label>
                  </div>
                  <div
                    className="field-body"
                  >
                    <div
                      className="control"
                      style={
                        Object {
                          "paddingTop": "0.25rem",
                        }
                      }
                    >
                      <span
                        className="nb-dates"
                        style={
                          Object {
                            "paddingTop": "0.25rem",
                          }
                        }
                      >
                        undefined stock
                      </span>
                      <button
                        className="button is-primary is-outlined is-small manage-stock"
                        disabled=""
                        id="manage-stocks"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="icon"
                        >
                          <Icon
                            svg="ico-calendar"
                          />
                        </span>
                        <span>
                          Gérer les stocks
                        </span>
                      </button>
                    </div>
                  </div>
                </div>,
              ],
              "className": "field-group offer-form",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "displayValue": [Function],
                  "errors": null,
                  "isExpanded": true,
                  "label": "Titre de l’offre",
                  "layout": "horizontal",
                  "name": "name",
                  "readOnly": false,
                  "required": true,
                  "size": "normal",
                  "storeValue": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "displayValue": [Function],
                  "errors": null,
                  "label": "Type",
                  "layout": "horizontal",
                  "name": "type",
                  "optionLabel": "proLabel",
                  "optionValue": "value",
                  "options": undefined,
                  "placeholder": "Sélectionnez un type d’offre",
                  "readOnly": Object {},
                  "required": true,
                  "size": "normal",
                  "storeValue": [Function],
                  "sublabel": "Le type d’offre ne peut pas être modifié une fois l’offre enregistrée.",
                  "type": "select",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              false,
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="field-label"
                    >
                      <label
                        className="label"
                        htmlFor="input_offers_name"
                      >
                        <div
                          className="subtitle"
                        >
                          Stocks :
                        </div>
                      </label>
                    </div>,
                    <div
                      className="field-body"
                    >
                      <div
                        className="control"
                        style={
                          Object {
                            "paddingTop": "0.25rem",
                          }
                        }
                      >
                        <span
                          className="nb-dates"
                          style={
                            Object {
                              "paddingTop": "0.25rem",
                            }
                          }
                        >
                          undefined stock
                        </span>
                        <button
                          className="button is-primary is-outlined is-small manage-stock"
                          disabled=""
                          id="manage-stocks"
                          onClick={[Function]}
                          type="button"
                        >
                          <span
                            className="icon"
                          >
                            <Icon
                              svg="ico-calendar"
                            />
                          </span>
                          <span>
                            Gérer les stocks
                          </span>
                        </button>
                      </div>
                    </div>,
                  ],
                  "className": "field is-horizontal field-text",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <label
                        className="label"
                        htmlFor="input_offers_name"
                      >
                        <div
                          className="subtitle"
                        >
                          Stocks :
                        </div>
                      </label>,
                      "className": "field-label",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <div
                          className="subtitle"
                        >
                          Stocks :
                        </div>,
                        "className": "label",
                        "htmlFor": "input_offers_name",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Stocks :",
                          "className": "subtitle",
                        },
                        "ref": null,
                        "rendered": "Stocks :",
                        "type": "div",
                      },
                      "type": "label",
                    },
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <div
                        className="control"
                        style={
                          Object {
                            "paddingTop": "0.25rem",
                          }
                        }
                      >
                        <span
                          className="nb-dates"
                          style={
                            Object {
                              "paddingTop": "0.25rem",
                            }
                          }
                        >
                          undefined stock
                        </span>
                        <button
                          className="button is-primary is-outlined is-small manage-stock"
                          disabled=""
                          id="manage-stocks"
                          onClick={[Function]}
                          type="button"
                        >
                          <span
                            className="icon"
                          >
                            <Icon
                              svg="ico-calendar"
                            />
                          </span>
                          <span>
                            Gérer les stocks
                          </span>
                        </button>
                      </div>,
                      "className": "field-body",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <span
                            className="nb-dates"
                            style={
                              Object {
                                "paddingTop": "0.25rem",
                              }
                            }
                          >
                            undefined stock
                          </span>,
                          <button
                            className="button is-primary is-outlined is-small manage-stock"
                            disabled=""
                            id="manage-stocks"
                            onClick={[Function]}
                            type="button"
                          >
                            <span
                              className="icon"
                            >
                              <Icon
                                svg="ico-calendar"
                              />
                            </span>
                            <span>
                              Gérer les stocks
                            </span>
                          </button>,
                        ],
                        "className": "control",
                        "style": Object {
                          "paddingTop": "0.25rem",
                        },
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "undefined stock",
                            "className": "nb-dates",
                            "style": Object {
                              "paddingTop": "0.25rem",
                            },
                          },
                          "ref": null,
                          "rendered": "undefined stock",
                          "type": "span",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [
                              <span
                                className="icon"
                              >
                                <Icon
                                  svg="ico-calendar"
                                />
                              </span>,
                              <span>
                                Gérer les stocks
                              </span>,
                            ],
                            "className": "button is-primary is-outlined is-small manage-stock",
                            "disabled": "",
                            "id": "manage-stocks",
                            "onClick": [Function],
                            "type": "button",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": <Icon
                                  svg="ico-calendar"
                                />,
                                "className": "icon",
                              },
                              "ref": null,
                              "rendered": Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "function",
                                "props": Object {
                                  "svg": "ico-calendar",
                                },
                                "ref": null,
                                "rendered": null,
                                "type": [Function],
                              },
                              "type": "span",
                            },
                            Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "children": "Gérer les stocks",
                              },
                              "ref": null,
                              "rendered": "Gérer les stocks",
                              "type": "span",
                            },
                          ],
                          "type": "button",
                        },
                      ],
                      "type": "div",
                    },
                    "type": "div",
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2
                  className="main-list-title"
                >
                  Infos pratiques
                </h2>,
                <div
                  className="field-group"
                />,
                false,
                <div
                  className="field-group"
                >
                  <Field
                    displayValue={[Function]}
                    errors={null}
                    label="Email auquel envoyer les réservations"
                    layout="horizontal"
                    name="bookingEmail"
                    readOnly={false}
                    size="normal"
                    storeValue={[Function]}
                    sublabel="Merci de laisser ce champ vide si vous ne souhaitez pas recevoir d’email lors des réservations"
                    type="email"
                  />
                </div>,
                <h2
                  className="main-list-title"
                >
                  Infos artistiques
                </h2>,
                <div
                  className="field-group"
                >
                  <Field
                    displayMaxLength={true}
                    displayValue={[Function]}
                    errors={null}
                    isExpanded={true}
                    label="Description"
                    layout="horizontal"
                    maxLength={1000}
                    name="description"
                    readOnly={false}
                    rows={5}
                    size="normal"
                    storeValue={[Function]}
                    type="textarea"
                  />
                </div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Infos pratiques",
                  "className": "main-list-title",
                },
                "ref": null,
                "rendered": "Infos pratiques",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    undefined,
                    undefined,
                    undefined,
                  ],
                  "className": "field-group",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                  undefined,
                  undefined,
                ],
                "type": "div",
              },
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    undefined,
                    false,
                    undefined,
                    undefined,
                    <Field
                      displayValue={[Function]}
                      errors={null}
                      label="Email auquel envoyer les réservations"
                      layout="horizontal"
                      name="bookingEmail"
                      readOnly={false}
                      size="normal"
                      storeValue={[Function]}
                      sublabel="Merci de laisser ce champ vide si vous ne souhaitez pas recevoir d’email lors des réservations"
                      type="email"
                    />,
                  ],
                  "className": "field-group",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                  false,
                  undefined,
                  undefined,
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "displayValue": [Function],
                      "errors": null,
                      "label": "Email auquel envoyer les réservations",
                      "layout": "horizontal",
                      "name": "bookingEmail",
                      "readOnly": false,
                      "size": "normal",
                      "storeValue": [Function],
                      "sublabel": "Merci de laisser ce champ vide si vous ne souhaitez pas recevoir d’email lors des réservations",
                      "type": "email",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Infos artistiques",
                  "className": "main-list-title",
                },
                "ref": null,
                "rendered": "Infos artistiques",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Field
                      displayMaxLength={true}
                      displayValue={[Function]}
                      errors={null}
                      isExpanded={true}
                      label="Description"
                      layout="horizontal"
                      maxLength={1000}
                      name="description"
                      readOnly={false}
                      rows={5}
                      size="normal"
                      storeValue={[Function]}
                      type="textarea"
                    />,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                  ],
                  "className": "field-group",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "displayMaxLength": true,
                      "displayValue": [Function],
                      "errors": null,
                      "isExpanded": true,
                      "label": "Description",
                      "layout": "horizontal",
                      "maxLength": 1000,
                      "name": "description",
                      "readOnly": false,
                      "rows": 5,
                      "size": "normal",
                      "storeValue": [Function],
                      "type": "textarea",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  false,
                  false,
                  false,
                  false,
                  false,
                  false,
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="control"
                >
                  <Link
                    className="button is-secondary is-medium"
                    id="cancel-button"
                    replace={false}
                    to="/offres/SN"
                    type="button"
                  >
                    Annuler
                  </Link>
                </div>,
                <div
                  className="control"
                >
                  <SubmitButton
                    className="button is-primary is-medium"
                    getDisabled={[Function]}
                    getTitle={[Function]}
                    requiredFields={Array []}
                    type="submit"
                  >
                    Enregistrer
                  </SubmitButton>
                </div>,
              ],
              "className": "field is-grouped is-grouped-centered",
              "style": Object {
                "justifyContent": "space-between",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Link
                    className="button is-secondary is-medium"
                    id="cancel-button"
                    replace={false}
                    to="/offres/SN"
                    type="button"
                  >
                    Annuler
                  </Link>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Annuler",
                    "className": "button is-secondary is-medium",
                    "id": "cancel-button",
                    "replace": false,
                    "to": "/offres/SN",
                    "type": "button",
                  },
                  "ref": null,
                  "rendered": "Annuler",
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <SubmitButton
                    className="button is-primary is-medium"
                    getDisabled={[Function]}
                    getTitle={[Function]}
                    requiredFields={Array []}
                    type="submit"
                  >
                    Enregistrer
                  </SubmitButton>,
                  "className": "control",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "Enregistrer",
                      undefined,
                    ],
                    "className": "button is-primary is-medium",
                    "getDisabled": [Function],
                    "getTitle": [Function],
                    "requiredFields": Array [],
                    "type": "submit",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Enregistrer",
                    undefined,
                  ],
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "backTo": Object {
          "label": "Vos offres",
          "path": "/offres",
        },
        "children": Array [
          <HeroSection
            subtitle="Super Livre"
            title="Détails de l’offre"
          >
            <p
              className="subtitle"
            >
              Renseignez les détails de cette offre, puis mettez-la en avant en ajoutant une ou plusieurs accroches.
            </p>
          </HeroSection>,
          <withRouter(Connect(_Form))
            BlockComponent={null}
            Tag={null}
            action="/offers/SN"
            className={null}
            errorsPatch={Object {}}
            failNotification="Formulaire non validé"
            formPatch={Object {}}
            formatPatch={[Function]}
            handleFail={null}
            handleFailNotification={null}
            handleFailRedirect={null}
            handleSuccess={[Function]}
            handleSuccessNotification={null}
            handleSuccessRedirect={null}
            method="PATCH"
            name="offer"
            normalizer={null}
            onEnterKey={null}
            onEscapeKey={null}
            onSubmit={null}
            patch={
              Object {
                "isDuo": false,
              }
            }
            successNotification="Formulaire non validé"
          >
            <div
              className="field-group offer-form"
            >
              <Field
                displayValue={[Function]}
                errors={null}
                isExpanded={true}
                label="Titre de l’offre"
                layout="horizontal"
                name="name"
                readOnly={false}
                required={true}
                size="normal"
                storeValue={[Function]}
              />
              <Field
                displayValue={[Function]}
                errors={null}
                label="Type"
                layout="horizontal"
                name="type"
                optionLabel="proLabel"
                optionValue="value"
                placeholder="Sélectionnez un type d’offre"
                readOnly={Object {}}
                required={true}
                size="normal"
                storeValue={[Function]}
                sublabel="Le type d’offre ne peut pas être modifié une fois l’offre enregistrée."
                type="select"
              />
              <div
                className="field is-horizontal field-text"
              >
                <div
                  className="field-label"
                >
                  <label
                    className="label"
                    htmlFor="input_offers_name"
                  >
                    <div
                      className="subtitle"
                    >
                      Stocks :
                    </div>
                  </label>
                </div>
                <div
                  className="field-body"
                >
                  <div
                    className="control"
                    style={
                      Object {
                        "paddingTop": "0.25rem",
                      }
                    }
                  >
                    <span
                      className="nb-dates"
                      style={
                        Object {
                          "paddingTop": "0.25rem",
                        }
                      }
                    >
                      undefined stock
                    </span>
                    <button
                      className="button is-primary is-outlined is-small manage-stock"
                      disabled=""
                      id="manage-stocks"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="icon"
                      >
                        <Icon
                          svg="ico-calendar"
                        />
                      </span>
                      <span>
                        Gérer les stocks
                      </span>
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <withRouter(Connect(MediationsManager)) />
            <div>
              <h2
                className="main-list-title"
              >
                Infos pratiques
              </h2>
              <div
                className="field-group"
              />
              <div
                className="field-group"
              >
                <Field
                  displayValue={[Function]}
                  errors={null}
                  label="Email auquel envoyer les réservations"
                  layout="horizontal"
                  name="bookingEmail"
                  readOnly={false}
                  size="normal"
                  storeValue={[Function]}
                  sublabel="Merci de laisser ce champ vide si vous ne souhaitez pas recevoir d’email lors des réservations"
                  type="email"
                />
              </div>
              <h2
                className="main-list-title"
              >
                Infos artistiques
              </h2>
              <div
                className="field-group"
              >
                <Field
                  displayMaxLength={true}
                  displayValue={[Function]}
                  errors={null}
                  isExpanded={true}
                  label="Description"
                  layout="horizontal"
                  maxLength={1000}
                  name="description"
                  readOnly={false}
                  rows={5}
                  size="normal"
                  storeValue={[Function]}
                  type="textarea"
                />
              </div>
            </div>
            <hr />
            <div
              className="field is-grouped is-grouped-centered"
              style={
                Object {
                  "justifyContent": "space-between",
                }
              }
            >
              <div
                className="control"
              >
                <Link
                  className="button is-secondary is-medium"
                  id="cancel-button"
                  replace={false}
                  to="/offres/SN"
                  type="button"
                >
                  Annuler
                </Link>
              </div>
              <div
                className="control"
              >
                <SubmitButton
                  className="button is-primary is-medium"
                  getDisabled={[Function]}
                  getTitle={[Function]}
                  requiredFields={Array []}
                  type="submit"
                >
                  Enregistrer
                </SubmitButton>
              </div>
            </div>
          </withRouter(Connect(_Form))>,
        ],
        "handleDataRequest": [Function],
        "id": "offer",
        "name": "offer",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              undefined,
              <p
                className="subtitle"
              >
                Renseignez les détails de cette offre, puis mettez-la en avant en ajoutant une ou plusieurs accroches.
              </p>,
            ],
            "subtitle": "Super Livre",
            "title": "Détails de l’offre",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Renseignez les détails de cette offre, puis mettez-la en avant en ajoutant une ou plusieurs accroches.",
                "className": "subtitle",
              },
              "ref": null,
              "rendered": "Renseignez les détails de cette offre, puis mettez-la en avant en ajoutant une ou plusieurs accroches.",
              "type": "p",
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "BlockComponent": null,
            "Tag": null,
            "action": "/offers/SN",
            "children": Array [
              <div
                className="field-group offer-form"
              >
                <Field
                  displayValue={[Function]}
                  errors={null}
                  isExpanded={true}
                  label="Titre de l’offre"
                  layout="horizontal"
                  name="name"
                  readOnly={false}
                  required={true}
                  size="normal"
                  storeValue={[Function]}
                />
                <Field
                  displayValue={[Function]}
                  errors={null}
                  label="Type"
                  layout="horizontal"
                  name="type"
                  optionLabel="proLabel"
                  optionValue="value"
                  placeholder="Sélectionnez un type d’offre"
                  readOnly={Object {}}
                  required={true}
                  size="normal"
                  storeValue={[Function]}
                  sublabel="Le type d’offre ne peut pas être modifié une fois l’offre enregistrée."
                  type="select"
                />
                <div
                  className="field is-horizontal field-text"
                >
                  <div
                    className="field-label"
                  >
                    <label
                      className="label"
                      htmlFor="input_offers_name"
                    >
                      <div
                        className="subtitle"
                      >
                        Stocks :
                      </div>
                    </label>
                  </div>
                  <div
                    className="field-body"
                  >
                    <div
                      className="control"
                      style={
                        Object {
                          "paddingTop": "0.25rem",
                        }
                      }
                    >
                      <span
                        className="nb-dates"
                        style={
                          Object {
                            "paddingTop": "0.25rem",
                          }
                        }
                      >
                        undefined stock
                      </span>
                      <button
                        className="button is-primary is-outlined is-small manage-stock"
                        disabled=""
                        id="manage-stocks"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="icon"
                        >
                          <Icon
                            svg="ico-calendar"
                          />
                        </span>
                        <span>
                          Gérer les stocks
                        </span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>,
              false,
              <withRouter(Connect(MediationsManager)) />,
              <div>
                <h2
                  className="main-list-title"
                >
                  Infos pratiques
                </h2>
                <div
                  className="field-group"
                />
                <div
                  className="field-group"
                >
                  <Field
                    displayValue={[Function]}
                    errors={null}
                    label="Email auquel envoyer les réservations"
                    layout="horizontal"
                    name="bookingEmail"
                    readOnly={false}
                    size="normal"
                    storeValue={[Function]}
                    sublabel="Merci de laisser ce champ vide si vous ne souhaitez pas recevoir d’email lors des réservations"
                    type="email"
                  />
                </div>
                <h2
                  className="main-list-title"
                >
                  Infos artistiques
                </h2>
                <div
                  className="field-group"
                >
                  <Field
                    displayMaxLength={true}
                    displayValue={[Function]}
                    errors={null}
                    isExpanded={true}
                    label="Description"
                    layout="horizontal"
                    maxLength={1000}
                    name="description"
                    readOnly={false}
                    rows={5}
                    size="normal"
                    storeValue={[Function]}
                    type="textarea"
                  />
                </div>
              </div>,
              <hr />,
              <div
                className="field is-grouped is-grouped-centered"
                style={
                  Object {
                    "justifyContent": "space-between",
                  }
                }
              >
                <div
                  className="control"
                >
                  <Link
                    className="button is-secondary is-medium"
                    id="cancel-button"
                    replace={false}
                    to="/offres/SN"
                    type="button"
                  >
                    Annuler
                  </Link>
                </div>
                <div
                  className="control"
                >
                  <SubmitButton
                    className="button is-primary is-medium"
                    getDisabled={[Function]}
                    getTitle={[Function]}
                    requiredFields={Array []}
                    type="submit"
                  >
                    Enregistrer
                  </SubmitButton>
                </div>
              </div>,
            ],
            "className": null,
            "errorsPatch": Object {},
            "failNotification": "Formulaire non validé",
            "formPatch": Object {},
            "formatPatch": [Function],
            "handleFail": null,
            "handleFailNotification": null,
            "handleFailRedirect": null,
            "handleSuccess": [Function],
            "handleSuccessNotification": null,
            "handleSuccessRedirect": null,
            "method": "PATCH",
            "name": "offer",
            "normalizer": null,
            "onEnterKey": null,
            "onEscapeKey": null,
            "onSubmit": null,
            "patch": Object {
              "isDuo": false,
            },
            "successNotification": "Formulaire non validé",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Field
                    displayValue={[Function]}
                    errors={null}
                    isExpanded={true}
                    label="Titre de l’offre"
                    layout="horizontal"
                    name="name"
                    readOnly={false}
                    required={true}
                    size="normal"
                    storeValue={[Function]}
                  />,
                  <Field
                    displayValue={[Function]}
                    errors={null}
                    label="Type"
                    layout="horizontal"
                    name="type"
                    optionLabel="proLabel"
                    optionValue="value"
                    placeholder="Sélectionnez un type d’offre"
                    readOnly={Object {}}
                    required={true}
                    size="normal"
                    storeValue={[Function]}
                    sublabel="Le type d’offre ne peut pas être modifié une fois l’offre enregistrée."
                    type="select"
                  />,
                  false,
                  false,
                  <div
                    className="field is-horizontal field-text"
                  >
                    <div
                      className="field-label"
                    >
                      <label
                        className="label"
                        htmlFor="input_offers_name"
                      >
                        <div
                          className="subtitle"
                        >
                          Stocks :
                        </div>
                      </label>
                    </div>
                    <div
                      className="field-body"
                    >
                      <div
                        className="control"
                        style={
                          Object {
                            "paddingTop": "0.25rem",
                          }
                        }
                      >
                        <span
                          className="nb-dates"
                          style={
                            Object {
                              "paddingTop": "0.25rem",
                            }
                          }
                        >
                          undefined stock
                        </span>
                        <button
                          className="button is-primary is-outlined is-small manage-stock"
                          disabled=""
                          id="manage-stocks"
                          onClick={[Function]}
                          type="button"
                        >
                          <span
                            className="icon"
                          >
                            <Icon
                              svg="ico-calendar"
                            />
                          </span>
                          <span>
                            Gérer les stocks
                          </span>
                        </button>
                      </div>
                    </div>
                  </div>,
                ],
                "className": "field-group offer-form",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "displayValue": [Function],
                    "errors": null,
                    "isExpanded": true,
                    "label": "Titre de l’offre",
                    "layout": "horizontal",
                    "name": "name",
                    "readOnly": false,
                    "required": true,
                    "size": "normal",
                    "storeValue": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "displayValue": [Function],
                    "errors": null,
                    "label": "Type",
                    "layout": "horizontal",
                    "name": "type",
                    "optionLabel": "proLabel",
                    "optionValue": "value",
                    "options": undefined,
                    "placeholder": "Sélectionnez un type d’offre",
                    "readOnly": Object {},
                    "required": true,
                    "size": "normal",
                    "storeValue": [Function],
                    "sublabel": "Le type d’offre ne peut pas être modifié une fois l’offre enregistrée.",
                    "type": "select",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                false,
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="field-label"
                      >
                        <label
                          className="label"
                          htmlFor="input_offers_name"
                        >
                          <div
                            className="subtitle"
                          >
                            Stocks :
                          </div>
                        </label>
                      </div>,
                      <div
                        className="field-body"
                      >
                        <div
                          className="control"
                          style={
                            Object {
                              "paddingTop": "0.25rem",
                            }
                          }
                        >
                          <span
                            className="nb-dates"
                            style={
                              Object {
                                "paddingTop": "0.25rem",
                              }
                            }
                          >
                            undefined stock
                          </span>
                          <button
                            className="button is-primary is-outlined is-small manage-stock"
                            disabled=""
                            id="manage-stocks"
                            onClick={[Function]}
                            type="button"
                          >
                            <span
                              className="icon"
                            >
                              <Icon
                                svg="ico-calendar"
                              />
                            </span>
                            <span>
                              Gérer les stocks
                            </span>
                          </button>
                        </div>
                      </div>,
                    ],
                    "className": "field is-horizontal field-text",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <label
                          className="label"
                          htmlFor="input_offers_name"
                        >
                          <div
                            className="subtitle"
                          >
                            Stocks :
                          </div>
                        </label>,
                        "className": "field-label",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <div
                            className="subtitle"
                          >
                            Stocks :
                          </div>,
                          "className": "label",
                          "htmlFor": "input_offers_name",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Stocks :",
                            "className": "subtitle",
                          },
                          "ref": null,
                          "rendered": "Stocks :",
                          "type": "div",
                        },
                        "type": "label",
                      },
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <div
                          className="control"
                          style={
                            Object {
                              "paddingTop": "0.25rem",
                            }
                          }
                        >
                          <span
                            className="nb-dates"
                            style={
                              Object {
                                "paddingTop": "0.25rem",
                              }
                            }
                          >
                            undefined stock
                          </span>
                          <button
                            className="button is-primary is-outlined is-small manage-stock"
                            disabled=""
                            id="manage-stocks"
                            onClick={[Function]}
                            type="button"
                          >
                            <span
                              className="icon"
                            >
                              <Icon
                                svg="ico-calendar"
                              />
                            </span>
                            <span>
                              Gérer les stocks
                            </span>
                          </button>
                        </div>,
                        "className": "field-body",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <span
                              className="nb-dates"
                              style={
                                Object {
                                  "paddingTop": "0.25rem",
                                }
                              }
                            >
                              undefined stock
                            </span>,
                            <button
                              className="button is-primary is-outlined is-small manage-stock"
                              disabled=""
                              id="manage-stocks"
                              onClick={[Function]}
                              type="button"
                            >
                              <span
                                className="icon"
                              >
                                <Icon
                                  svg="ico-calendar"
                                />
                              </span>
                              <span>
                                Gérer les stocks
                              </span>
                            </button>,
                          ],
                          "className": "control",
                          "style": Object {
                            "paddingTop": "0.25rem",
                          },
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "undefined stock",
                              "className": "nb-dates",
                              "style": Object {
                                "paddingTop": "0.25rem",
                              },
                            },
                            "ref": null,
                            "rendered": "undefined stock",
                            "type": "span",
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [
                                <span
                                  className="icon"
                                >
                                  <Icon
                                    svg="ico-calendar"
                                  />
                                </span>,
                                <span>
                                  Gérer les stocks
                                </span>,
                              ],
                              "className": "button is-primary is-outlined is-small manage-stock",
                              "disabled": "",
                              "id": "manage-stocks",
                              "onClick": [Function],
                              "type": "button",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": <Icon
                                    svg="ico-calendar"
                                  />,
                                  "className": "icon",
                                },
                                "ref": null,
                                "rendered": Object {
                                  "instance": null,
                                  "key": undefined,
                                  "nodeType": "function",
                                  "props": Object {
                                    "svg": "ico-calendar",
                                  },
                                  "ref": null,
                                  "rendered": null,
                                  "type": [Function],
                                },
                                "type": "span",
                              },
                              Object {
                                "instance": null,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "children": "Gérer les stocks",
                                },
                                "ref": null,
                                "rendered": "Gérer les stocks",
                                "type": "span",
                              },
                            ],
                            "type": "button",
                          },
                        ],
                        "type": "div",
                      },
                      "type": "div",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <h2
                    className="main-list-title"
                  >
                    Infos pratiques
                  </h2>,
                  <div
                    className="field-group"
                  />,
                  false,
                  <div
                    className="field-group"
                  >
                    <Field
                      displayValue={[Function]}
                      errors={null}
                      label="Email auquel envoyer les réservations"
                      layout="horizontal"
                      name="bookingEmail"
                      readOnly={false}
                      size="normal"
                      storeValue={[Function]}
                      sublabel="Merci de laisser ce champ vide si vous ne souhaitez pas recevoir d’email lors des réservations"
                      type="email"
                    />
                  </div>,
                  <h2
                    className="main-list-title"
                  >
                    Infos artistiques
                  </h2>,
                  <div
                    className="field-group"
                  >
                    <Field
                      displayMaxLength={true}
                      displayValue={[Function]}
                      errors={null}
                      isExpanded={true}
                      label="Description"
                      layout="horizontal"
                      maxLength={1000}
                      name="description"
                      readOnly={false}
                      rows={5}
                      size="normal"
                      storeValue={[Function]}
                      type="textarea"
                    />
                  </div>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Infos pratiques",
                    "className": "main-list-title",
                  },
                  "ref": null,
                  "rendered": "Infos pratiques",
                  "type": "h2",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      undefined,
                      undefined,
                      undefined,
                    ],
                    "className": "field-group",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                    undefined,
                    undefined,
                  ],
                  "type": "div",
                },
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      undefined,
                      false,
                      undefined,
                      undefined,
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        label="Email auquel envoyer les réservations"
                        layout="horizontal"
                        name="bookingEmail"
                        readOnly={false}
                        size="normal"
                        storeValue={[Function]}
                        sublabel="Merci de laisser ce champ vide si vous ne souhaitez pas recevoir d’email lors des réservations"
                        type="email"
                      />,
                    ],
                    "className": "field-group",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                    false,
                    undefined,
                    undefined,
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "displayValue": [Function],
                        "errors": null,
                        "label": "Email auquel envoyer les réservations",
                        "layout": "horizontal",
                        "name": "bookingEmail",
                        "readOnly": false,
                        "size": "normal",
                        "storeValue": [Function],
                        "sublabel": "Merci de laisser ce champ vide si vous ne souhaitez pas recevoir d’email lors des réservations",
                        "type": "email",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Infos artistiques",
                    "className": "main-list-title",
                  },
                  "ref": null,
                  "rendered": "Infos artistiques",
                  "type": "h2",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <Field
                        displayMaxLength={true}
                        displayValue={[Function]}
                        errors={null}
                        isExpanded={true}
                        label="Description"
                        layout="horizontal"
                        maxLength={1000}
                        name="description"
                        readOnly={false}
                        rows={5}
                        size="normal"
                        storeValue={[Function]}
                        type="textarea"
                      />,
                      false,
                      false,
                      false,
                      false,
                      false,
                      false,
                    ],
                    "className": "field-group",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "displayMaxLength": true,
                        "displayValue": [Function],
                        "errors": null,
                        "isExpanded": true,
                        "label": "Description",
                        "layout": "horizontal",
                        "maxLength": 1000,
                        "name": "description",
                        "readOnly": false,
                        "rows": 5,
                        "size": "normal",
                        "storeValue": [Function],
                        "type": "textarea",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="control"
                  >
                    <Link
                      className="button is-secondary is-medium"
                      id="cancel-button"
                      replace={false}
                      to="/offres/SN"
                      type="button"
                    >
                      Annuler
                    </Link>
                  </div>,
                  <div
                    className="control"
                  >
                    <SubmitButton
                      className="button is-primary is-medium"
                      getDisabled={[Function]}
                      getTitle={[Function]}
                      requiredFields={Array []}
                      type="submit"
                    >
                      Enregistrer
                    </SubmitButton>
                  </div>,
                ],
                "className": "field is-grouped is-grouped-centered",
                "style": Object {
                  "justifyContent": "space-between",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Link
                      className="button is-secondary is-medium"
                      id="cancel-button"
                      replace={false}
                      to="/offres/SN"
                      type="button"
                    >
                      Annuler
                    </Link>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Annuler",
                      "className": "button is-secondary is-medium",
                      "id": "cancel-button",
                      "replace": false,
                      "to": "/offres/SN",
                      "type": "button",
                    },
                    "ref": null,
                    "rendered": "Annuler",
                    "type": [Function],
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <SubmitButton
                      className="button is-primary is-medium"
                      getDisabled={[Function]}
                      getTitle={[Function]}
                      requiredFields={Array []}
                      type="submit"
                    >
                      Enregistrer
                    </SubmitButton>,
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        "Enregistrer",
                        undefined,
                      ],
                      "className": "button is-primary is-medium",
                      "getDisabled": [Function],
                      "getTitle": [Function],
                      "requiredFields": Array [],
                      "type": "submit",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Enregistrer",
                      undefined,
                    ],
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
