// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | Offers | RawOffers snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawOffers
    dispatch={[Function]}
    location={
        Object {
            "pathname": "/offres",
          }
    }
    offers={Array []}
    pagination={
        Object {
            "apiQuery": Object {
              "keywords": null,
              "offererId": null,
              "orderBy": "offer.id+desc",
              "venueId": null,
            },
          }
    }
    query={
        Object {
            "change": [Function],
            "parse": [Function],
          }
    }
    search=""
    types={Array []}
    user={Object {}}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <HeroSection
          title="Vos offres"
>
          <NavLink
                    activeClassName="active"
                    aria-current="page"
                    className="cta button is-primary"
                    to="/offres/nouveau"
          >
                    <span
                              className="icon"
                    >
                              <Icon
                                        svg="ico-offres-w"
                              />
                    </span>
                    <span>
                              Créer une offre
                    </span>
          </NavLink>
</HeroSection>,
        <form
          className="section"
          onSubmit={[Function]}
>
          <label
                    className="label"
          >
                    Rechercher une offre :
          </label>
          <div
                    className="field is-grouped"
          >
                    <p
                              className="control is-expanded"
                    >
                              <input
                                        className="input"
                                        defaultValue={undefined}
                                        id="search"
                                        placeholder="Saisissez un ou plusieurs mots complets"
                                        type="text"
                              />
                    </p>
                    <p
                              className="control"
                    >
                              <button
                                        className="button is-primary is-outlined"
                                        id="search-button"
                                        type="submit"
                              >
                                        OK
                              </button>
                               
                              <button
                                        className="button is-secondary"
                                        disabled={true}
                              >
                                         
                                        <Icon
                                                  svg="ico-filter"
                                        />
                                         
                              </button>
                    </p>
          </div>
</form>,
        <ul
          className="section"
/>,
        <div
          className="section"
>
          <withRouter(_withQueryRouter)
                    className="offers-list main-list"
                    element="ul"
                    hasMore={false}
                    isLoading={true}
                    loader={
                              <Spinner
                                        Tag="div"
                                        className={null}
                                        dotFrequency={500}
                                        label="Chargement"
                                        style={null}
                              />
                    }
                    useWindow={true}
          >
                    
          </withRouter(_withQueryRouter)>
</div>,
      ],
      "handleRequestData": [Function],
      "name": "offers",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <NavLink
            activeClassName="active"
            aria-current="page"
            className="cta button is-primary"
            to="/offres/nouveau"
>
            <span
                        className="icon"
            >
                        <Icon
                                    svg="ico-offres-w"
                        />
            </span>
            <span>
                        Créer une offre
            </span>
</NavLink>,
          "title": "Vos offres",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "aria-current": "page",
            "children": Array [
              <span
                className="icon"
>
                <Icon
                                svg="ico-offres-w"
                />
</span>,
              <span>
                Créer une offre
</span>,
            ],
            "className": "cta button is-primary",
            "to": "/offres/nouveau",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Icon
                  svg="ico-offres-w"
/>,
                "className": "icon",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "svg": "ico-offres-w",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Créer une offre",
              },
              "ref": null,
              "rendered": "Créer une offre",
              "type": "span",
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <label
              className="label"
>
              Rechercher une offre :
</label>,
            <div
              className="field is-grouped"
>
              <p
                            className="control is-expanded"
              >
                            <input
                                          className="input"
                                          defaultValue={undefined}
                                          id="search"
                                          placeholder="Saisissez un ou plusieurs mots complets"
                                          type="text"
                            />
              </p>
              <p
                            className="control"
              >
                            <button
                                          className="button is-primary is-outlined"
                                          id="search-button"
                                          type="submit"
                            >
                                          OK
                            </button>
                             
                            <button
                                          className="button is-secondary"
                                          disabled={true}
                            >
                                           
                                          <Icon
                                                        svg="ico-filter"
                                          />
                                           
                            </button>
              </p>
</div>,
          ],
          "className": "section",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Rechercher une offre :",
              "className": "label",
            },
            "ref": null,
            "rendered": "Rechercher une offre :",
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="control is-expanded"
>
                  <input
                                    className="input"
                                    defaultValue={undefined}
                                    id="search"
                                    placeholder="Saisissez un ou plusieurs mots complets"
                                    type="text"
                  />
</p>,
                <p
                  className="control"
>
                  <button
                                    className="button is-primary is-outlined"
                                    id="search-button"
                                    type="submit"
                  >
                                    OK
                  </button>
                   
                  <button
                                    className="button is-secondary"
                                    disabled={true}
                  >
                                     
                                    <Icon
                                                      svg="ico-filter"
                                    />
                                     
                  </button>
</p>,
              ],
              "className": "field is-grouped",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    className="input"
                    defaultValue={undefined}
                    id="search"
                    placeholder="Saisissez un ou plusieurs mots complets"
                    type="text"
/>,
                  "className": "control is-expanded",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "input",
                    "defaultValue": undefined,
                    "id": "search",
                    "placeholder": "Saisissez un ou plusieurs mots complets",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <button
                      className="button is-primary is-outlined"
                      id="search-button"
                      type="submit"
>
                      OK
</button>,
                    " ",
                    <button
                      className="button is-secondary"
                      disabled={true}
>
                       
                      <Icon
                                            svg="ico-filter"
                      />
                       
</button>,
                  ],
                  "className": "control",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "OK",
                      "className": "button is-primary is-outlined",
                      "id": "search-button",
                      "type": "submit",
                    },
                    "ref": null,
                    "rendered": "OK",
                    "type": "button",
                  },
                  " ",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        " ",
                        <Icon
                          svg="ico-filter"
/>,
                        " ",
                      ],
                      "className": "button is-secondary",
                      "disabled": true,
                    },
                    "ref": null,
                    "rendered": Array [
                      " ",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "svg": "ico-filter",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      " ",
                    ],
                    "type": "button",
                  },
                ],
                "type": "p",
              },
            ],
            "type": "div",
          },
        ],
        "type": "form",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": undefined,
          "className": "section",
        },
        "ref": null,
        "rendered": null,
        "type": "ul",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            false,
            <withRouter(_withQueryRouter)
              className="offers-list main-list"
              element="ul"
              hasMore={false}
              isLoading={true}
              loader={
                            <Spinner
                                          Tag="div"
                                          className={null}
                                          dotFrequency={500}
                                          label="Chargement"
                                          style={null}
                            />
              }
              useWindow={true}
>
              
</withRouter(_withQueryRouter)>,
          ],
          "className": "section",
        },
        "ref": null,
        "rendered": Array [
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [],
              "className": "offers-list main-list",
              "element": "ul",
              "hasMore": false,
              "isLoading": true,
              "loader": <Spinner
                Tag="div"
                className={null}
                dotFrequency={500}
                label="Chargement"
                style={null}
/>,
              "useWindow": true,
            },
            "ref": null,
            "rendered": Array [],
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <HeroSection
            title="Vos offres"
>
            <NavLink
                        activeClassName="active"
                        aria-current="page"
                        className="cta button is-primary"
                        to="/offres/nouveau"
            >
                        <span
                                    className="icon"
                        >
                                    <Icon
                                                svg="ico-offres-w"
                                    />
                        </span>
                        <span>
                                    Créer une offre
                        </span>
            </NavLink>
</HeroSection>,
          <form
            className="section"
            onSubmit={[Function]}
>
            <label
                        className="label"
            >
                        Rechercher une offre :
            </label>
            <div
                        className="field is-grouped"
            >
                        <p
                                    className="control is-expanded"
                        >
                                    <input
                                                className="input"
                                                defaultValue={undefined}
                                                id="search"
                                                placeholder="Saisissez un ou plusieurs mots complets"
                                                type="text"
                                    />
                        </p>
                        <p
                                    className="control"
                        >
                                    <button
                                                className="button is-primary is-outlined"
                                                id="search-button"
                                                type="submit"
                                    >
                                                OK
                                    </button>
                                     
                                    <button
                                                className="button is-secondary"
                                                disabled={true}
                                    >
                                                 
                                                <Icon
                                                            svg="ico-filter"
                                                />
                                                 
                                    </button>
                        </p>
            </div>
</form>,
          <ul
            className="section"
/>,
          <div
            className="section"
>
            <withRouter(_withQueryRouter)
                        className="offers-list main-list"
                        element="ul"
                        hasMore={false}
                        isLoading={true}
                        loader={
                                    <Spinner
                                                Tag="div"
                                                className={null}
                                                dotFrequency={500}
                                                label="Chargement"
                                                style={null}
                                    />
                        }
                        useWindow={true}
            >
                        
            </withRouter(_withQueryRouter)>
</div>,
        ],
        "handleRequestData": [Function],
        "name": "offers",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <NavLink
              activeClassName="active"
              aria-current="page"
              className="cta button is-primary"
              to="/offres/nouveau"
>
              <span
                            className="icon"
              >
                            <Icon
                                          svg="ico-offres-w"
                            />
              </span>
              <span>
                            Créer une offre
              </span>
</NavLink>,
            "title": "Vos offres",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "activeClassName": "active",
              "aria-current": "page",
              "children": Array [
                <span
                  className="icon"
>
                  <Icon
                                    svg="ico-offres-w"
                  />
</span>,
                <span>
                  Créer une offre
</span>,
              ],
              "className": "cta button is-primary",
              "to": "/offres/nouveau",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Icon
                    svg="ico-offres-w"
/>,
                  "className": "icon",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "svg": "ico-offres-w",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "span",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Créer une offre",
                },
                "ref": null,
                "rendered": "Créer une offre",
                "type": "span",
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                className="label"
>
                Rechercher une offre :
</label>,
              <div
                className="field is-grouped"
>
                <p
                                className="control is-expanded"
                >
                                <input
                                                className="input"
                                                defaultValue={undefined}
                                                id="search"
                                                placeholder="Saisissez un ou plusieurs mots complets"
                                                type="text"
                                />
                </p>
                <p
                                className="control"
                >
                                <button
                                                className="button is-primary is-outlined"
                                                id="search-button"
                                                type="submit"
                                >
                                                OK
                                </button>
                                 
                                <button
                                                className="button is-secondary"
                                                disabled={true}
                                >
                                                 
                                                <Icon
                                                                svg="ico-filter"
                                                />
                                                 
                                </button>
                </p>
</div>,
            ],
            "className": "section",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Rechercher une offre :",
                "className": "label",
              },
              "ref": null,
              "rendered": "Rechercher une offre :",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <p
                    className="control is-expanded"
>
                    <input
                                        className="input"
                                        defaultValue={undefined}
                                        id="search"
                                        placeholder="Saisissez un ou plusieurs mots complets"
                                        type="text"
                    />
</p>,
                  <p
                    className="control"
>
                    <button
                                        className="button is-primary is-outlined"
                                        id="search-button"
                                        type="submit"
                    >
                                        OK
                    </button>
                     
                    <button
                                        className="button is-secondary"
                                        disabled={true}
                    >
                                         
                                        <Icon
                                                            svg="ico-filter"
                                        />
                                         
                    </button>
</p>,
                ],
                "className": "field is-grouped",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="input"
                      defaultValue={undefined}
                      id="search"
                      placeholder="Saisissez un ou plusieurs mots complets"
                      type="text"
/>,
                    "className": "control is-expanded",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "input",
                      "defaultValue": undefined,
                      "id": "search",
                      "placeholder": "Saisissez un ou plusieurs mots complets",
                      "type": "text",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "p",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <button
                        className="button is-primary is-outlined"
                        id="search-button"
                        type="submit"
>
                        OK
</button>,
                      " ",
                      <button
                        className="button is-secondary"
                        disabled={true}
>
                         
                        <Icon
                                                svg="ico-filter"
                        />
                         
</button>,
                    ],
                    "className": "control",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "OK",
                        "className": "button is-primary is-outlined",
                        "id": "search-button",
                        "type": "submit",
                      },
                      "ref": null,
                      "rendered": "OK",
                      "type": "button",
                    },
                    " ",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          " ",
                          <Icon
                            svg="ico-filter"
/>,
                          " ",
                        ],
                        "className": "button is-secondary",
                        "disabled": true,
                      },
                      "ref": null,
                      "rendered": Array [
                        " ",
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "function",
                          "props": Object {
                            "svg": "ico-filter",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": [Function],
                        },
                        " ",
                      ],
                      "type": "button",
                    },
                  ],
                  "type": "p",
                },
              ],
              "type": "div",
            },
          ],
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "className": "section",
          },
          "ref": null,
          "rendered": null,
          "type": "ul",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              false,
              <withRouter(_withQueryRouter)
                className="offers-list main-list"
                element="ul"
                hasMore={false}
                isLoading={true}
                loader={
                                <Spinner
                                                Tag="div"
                                                className={null}
                                                dotFrequency={500}
                                                label="Chargement"
                                                style={null}
                                />
                }
                useWindow={true}
>
                
</withRouter(_withQueryRouter)>,
            ],
            "className": "section",
          },
          "ref": null,
          "rendered": Array [
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [],
                "className": "offers-list main-list",
                "element": "ul",
                "hasMore": false,
                "isLoading": true,
                "loader": <Spinner
                  Tag="div"
                  className={null}
                  dotFrequency={500}
                  label="Chargement"
                  style={null}
/>,
                "useWindow": true,
              },
              "ref": null,
              "rendered": Array [],
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
