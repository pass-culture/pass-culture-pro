// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
        Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
    }
>
    <RawOfferItem
        dispatch={[Function]}
        location={
            Object {
                "search": "?orderBy=offer.id+desc",
              }
        }
        maxDescriptionLength={300}
        offer={
            Object {
                "bookingEmail": "booking.email@test.com",
                "dateCreated": "2019-02-25T09:50:10.735519Z",
                "dateModifiedAtLastProvider": "2019-02-25T09:50:31.881297Z",
                "eventId": null,
                "eventOccurrencesIds": Array [],
                "id": "M4",
                "idAtProviders": null,
                "isActive": true,
                "lastProviderId": null,
                "mediationsIds": Array [
                  "HA",
                ],
                "modelName": "Offer",
                "stocksIds": Array [
                  "MQ",
                ],
                "thingId": "EY",
                "venueId": "CU",
              }
        }
    />
</Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "dispatch": [Function],
      "location": Object {
        "search": "?orderBy=offer.id+desc",
      },
      "maxDescriptionLength": 300,
      "offer": Object {
        "bookingEmail": "booking.email@test.com",
        "dateCreated": "2019-02-25T09:50:10.735519Z",
        "dateModifiedAtLastProvider": "2019-02-25T09:50:31.881297Z",
        "eventId": null,
        "eventOccurrencesIds": Array [],
        "id": "M4",
        "idAtProviders": null,
        "isActive": true,
        "lastProviderId": null,
        "mediationsIds": Array [
          "HA",
        ],
        "modelName": "Offer",
        "stocksIds": Array [
          "MQ",
        ],
        "thingId": "EY",
        "venueId": "CU",
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "dispatch": [Function],
        "location": Object {
          "search": "?orderBy=offer.id+desc",
        },
        "maxDescriptionLength": 300,
        "offer": Object {
          "bookingEmail": "booking.email@test.com",
          "dateCreated": "2019-02-25T09:50:10.735519Z",
          "dateModifiedAtLastProvider": "2019-02-25T09:50:31.881297Z",
          "eventId": null,
          "eventOccurrencesIds": Array [],
          "id": "M4",
          "idAtProviders": null,
          "isActive": true,
          "lastProviderId": null,
          "mediationsIds": Array [
            "HA",
          ],
          "modelName": "Offer",
          "stocksIds": Array [
            "MQ",
          ],
          "thingId": "EY",
          "venueId": "CU",
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
