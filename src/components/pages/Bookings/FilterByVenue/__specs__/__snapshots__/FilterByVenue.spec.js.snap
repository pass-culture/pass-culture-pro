// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | Bookings | FilterByVenue should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FilterByVenue
    isDigital={false}
    loadVenues={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    updateIsFilteredByDigitalVenues={[MockFunction]}
    updateVenueId={[MockFunction]}
    venueId=""
    venuesOptions={
      Array [
        Object {
          "id": 1,
          "name": "Babar",
        },
        Object {
          "id": 2,
          "name": "Céleste",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <div
          id="filter-by-venue"
        >
          <label
            className="has-text-black"
            htmlFor="venues"
          >
            Sélectionnez un lieu :
          </label>
          <select
            className="pc-selectbox"
            disabled={false}
            id="venues"
            onBlur={[MockFunction]}
            onChange={[MockFunction]}
            value=""
          >
            <option
              disabled={true}
              label=" - Choisissez un lieu - "
              selected={true}
            />
            <option
              value={1}
            >
              Babar
            </option>
            <option
              value={2}
            >
              Céleste
            </option>
          </select>
        </div>,
        <div
          className="select-digital-offer mt16 mb12"
        >
          <div>
            ou :
          </div>
          <input
            className="pc-checkbox input"
            defaultChecked={false}
            id="isDigital"
            onClick={[Function]}
            type="checkbox"
          />
          <label
            htmlFor="isDigital"
          >
            Cochez cette case pour voir les offres numériques
          </label>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <label
              className="has-text-black"
              htmlFor="venues"
            >
              Sélectionnez un lieu :
            </label>,
            <select
              className="pc-selectbox"
              disabled={false}
              id="venues"
              onBlur={[MockFunction]}
              onChange={[MockFunction]}
              value=""
            >
              <option
                disabled={true}
                label=" - Choisissez un lieu - "
                selected={true}
              />
              <option
                value={1}
              >
                Babar
              </option>
              <option
                value={2}
              >
                Céleste
              </option>
            </select>,
          ],
          "id": "filter-by-venue",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Sélectionnez un lieu :",
              "className": "has-text-black",
              "htmlFor": "venues",
            },
            "ref": null,
            "rendered": "Sélectionnez un lieu :",
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <option
                  disabled={true}
                  label=" - Choisissez un lieu - "
                  selected={true}
                />,
                Array [
                  <option
                    value={1}
                  >
                    Babar
                  </option>,
                  <option
                    value={2}
                  >
                    Céleste
                  </option>,
                ],
              ],
              "className": "pc-selectbox",
              "disabled": false,
              "id": "venues",
              "onBlur": [MockFunction],
              "onChange": [MockFunction],
              "value": "",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "disabled": true,
                  "label": " - Choisissez un lieu - ",
                  "selected": true,
                },
                "ref": null,
                "rendered": null,
                "type": "option",
              },
              Object {
                "instance": null,
                "key": "1",
                "nodeType": "host",
                "props": Object {
                  "children": "Babar",
                  "value": 1,
                },
                "ref": null,
                "rendered": "Babar",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": "2",
                "nodeType": "host",
                "props": Object {
                  "children": "Céleste",
                  "value": 2,
                },
                "ref": null,
                "rendered": "Céleste",
                "type": "option",
              },
            ],
            "type": "select",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              ou :
            </div>,
            <input
              className="pc-checkbox input"
              defaultChecked={false}
              id="isDigital"
              onClick={[Function]}
              type="checkbox"
            />,
            <label
              htmlFor="isDigital"
            >
              Cochez cette case pour voir les offres numériques
            </label>,
          ],
          "className": "select-digital-offer mt16 mb12",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "ou :",
            },
            "ref": null,
            "rendered": "ou :",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "pc-checkbox input",
              "defaultChecked": false,
              "id": "isDigital",
              "onClick": [Function],
              "type": "checkbox",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Cochez cette case pour voir les offres numériques",
              "htmlFor": "isDigital",
            },
            "ref": null,
            "rendered": "Cochez cette case pour voir les offres numériques",
            "type": "label",
          },
        ],
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div
            id="filter-by-venue"
          >
            <label
              className="has-text-black"
              htmlFor="venues"
            >
              Sélectionnez un lieu :
            </label>
            <select
              className="pc-selectbox"
              disabled={false}
              id="venues"
              onBlur={[MockFunction]}
              onChange={[MockFunction]}
              value=""
            >
              <option
                disabled={true}
                label=" - Choisissez un lieu - "
                selected={true}
              />
              <option
                value={1}
              >
                Babar
              </option>
              <option
                value={2}
              >
                Céleste
              </option>
            </select>
          </div>,
          <div
            className="select-digital-offer mt16 mb12"
          >
            <div>
              ou :
            </div>
            <input
              className="pc-checkbox input"
              defaultChecked={false}
              id="isDigital"
              onClick={[Function]}
              type="checkbox"
            />
            <label
              htmlFor="isDigital"
            >
              Cochez cette case pour voir les offres numériques
            </label>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                className="has-text-black"
                htmlFor="venues"
              >
                Sélectionnez un lieu :
              </label>,
              <select
                className="pc-selectbox"
                disabled={false}
                id="venues"
                onBlur={[MockFunction]}
                onChange={[MockFunction]}
                value=""
              >
                <option
                  disabled={true}
                  label=" - Choisissez un lieu - "
                  selected={true}
                />
                <option
                  value={1}
                >
                  Babar
                </option>
                <option
                  value={2}
                >
                  Céleste
                </option>
              </select>,
            ],
            "id": "filter-by-venue",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Sélectionnez un lieu :",
                "className": "has-text-black",
                "htmlFor": "venues",
              },
              "ref": null,
              "rendered": "Sélectionnez un lieu :",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <option
                    disabled={true}
                    label=" - Choisissez un lieu - "
                    selected={true}
                  />,
                  Array [
                    <option
                      value={1}
                    >
                      Babar
                    </option>,
                    <option
                      value={2}
                    >
                      Céleste
                    </option>,
                  ],
                ],
                "className": "pc-selectbox",
                "disabled": false,
                "id": "venues",
                "onBlur": [MockFunction],
                "onChange": [MockFunction],
                "value": "",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "disabled": true,
                    "label": " - Choisissez un lieu - ",
                    "selected": true,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "option",
                },
                Object {
                  "instance": null,
                  "key": "1",
                  "nodeType": "host",
                  "props": Object {
                    "children": "Babar",
                    "value": 1,
                  },
                  "ref": null,
                  "rendered": "Babar",
                  "type": "option",
                },
                Object {
                  "instance": null,
                  "key": "2",
                  "nodeType": "host",
                  "props": Object {
                    "children": "Céleste",
                    "value": 2,
                  },
                  "ref": null,
                  "rendered": "Céleste",
                  "type": "option",
                },
              ],
              "type": "select",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                ou :
              </div>,
              <input
                className="pc-checkbox input"
                defaultChecked={false}
                id="isDigital"
                onClick={[Function]}
                type="checkbox"
              />,
              <label
                htmlFor="isDigital"
              >
                Cochez cette case pour voir les offres numériques
              </label>,
            ],
            "className": "select-digital-offer mt16 mb12",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "ou :",
              },
              "ref": null,
              "rendered": "ou :",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "pc-checkbox input",
                "defaultChecked": false,
                "id": "isDigital",
                "onClick": [Function],
                "type": "checkbox",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Cochez cette case pour voir les offres numériques",
                "htmlFor": "isDigital",
              },
              "ref": null,
              "rendered": "Cochez cette case pour voir les offres numériques",
              "type": "label",
            },
          ],
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
