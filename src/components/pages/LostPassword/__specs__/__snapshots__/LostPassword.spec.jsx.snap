// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | LostPassword should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LostPassword
    change={false}
    envoye={false}
    errors={Object {}}
    token="ABC"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <div
          className="logo-side"
        >
          <Logo
            className=""
            noLink={true}
            signPage={true}
            whiteHeader={false}
          />
        </div>,
        <div
          className="container"
        >
          <div
            className="columns"
          >
            <div
              className="column is-offset-6 is-two-fifths"
            >
              <section
                className="hero has-text-grey"
              >
                <div
                  className="hero-body"
                >
                  <h1
                    className="title is-spaced is-1"
                  >
                    <span
                      className="has-text-weight-normal"
                    >
                      Créer un nouveau mot de passe
                    </span>
                  </h1>
                  <h2
                    className="subtitle is-2"
                  >
                    Saisissez le nouveau mot de passe
                  </h2>
                  <span
                    className="has-text-grey"
                  >
                    <span
                      className="required-legend"
                    >
                      *
                    </span>
                     Champs obligatoires
                  </span>
                  <withRouter(Connect(_Form))
                    BlockComponent={null}
                    Tag="form"
                    action="/users/new-password"
                    className={null}
                    errorsPatch={Object {}}
                    failNotification="Formulaire non validé"
                    formPatch={Object {}}
                    formatPatch={[Function]}
                    handleFail={null}
                    handleFailNotification={null}
                    handleFailRedirect={null}
                    handleSuccess={null}
                    handleSuccessNotification={null}
                    handleSuccessRedirect={[Function]}
                    layout="vertical"
                    name="user"
                    normalizer={null}
                    onEnterKey={null}
                    onEscapeKey={null}
                    onSubmit={null}
                    patch={
                      Object {
                        "token": "ABC",
                      }
                    }
                    successNotification="Formulaire non validé"
                  >
                    <Field
                      displayValue={[Function]}
                      errors={null}
                      layout="horizontal"
                      name="token"
                      size="normal"
                      storeValue={[Function]}
                      type="hidden"
                    />
                    <Field
                      displayValue={[Function]}
                      errors={null}
                      label="Nouveau mot de passe"
                      layout="horizontal"
                      name="newPassword"
                      placeholder="******"
                      required={true}
                      size="normal"
                      storeValue={[Function]}
                      type="password"
                      value="lolilol"
                    />
                    <div
                      className="errors"
                    />
                    <div
                      className="field buttons-field"
                    >
                      <SubmitButton
                        className="button is-primary is-outlined"
                        getDisabled={[Function]}
                        getTitle={[Function]}
                        id="changePassword"
                        requiredFields={Array []}
                        type="submit"
                      >
                        Envoyer
                      </SubmitButton>
                    </div>
                  </withRouter(Connect(_Form))>
                </div>
              </section>
            </div>
          </div>
        </div>,
      ],
      "fullscreen": true,
      "name": "sign-in",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Logo
            className=""
            noLink={true}
            signPage={true}
            whiteHeader={false}
          />,
          "className": "logo-side",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "",
            "noLink": true,
            "signPage": true,
            "whiteHeader": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="columns"
          >
            <div
              className="column is-offset-6 is-two-fifths"
            >
              <section
                className="hero has-text-grey"
              >
                <div
                  className="hero-body"
                >
                  <h1
                    className="title is-spaced is-1"
                  >
                    <span
                      className="has-text-weight-normal"
                    >
                      Créer un nouveau mot de passe
                    </span>
                  </h1>
                  <h2
                    className="subtitle is-2"
                  >
                    Saisissez le nouveau mot de passe
                  </h2>
                  <span
                    className="has-text-grey"
                  >
                    <span
                      className="required-legend"
                    >
                      *
                    </span>
                     Champs obligatoires
                  </span>
                  <withRouter(Connect(_Form))
                    BlockComponent={null}
                    Tag="form"
                    action="/users/new-password"
                    className={null}
                    errorsPatch={Object {}}
                    failNotification="Formulaire non validé"
                    formPatch={Object {}}
                    formatPatch={[Function]}
                    handleFail={null}
                    handleFailNotification={null}
                    handleFailRedirect={null}
                    handleSuccess={null}
                    handleSuccessNotification={null}
                    handleSuccessRedirect={[Function]}
                    layout="vertical"
                    name="user"
                    normalizer={null}
                    onEnterKey={null}
                    onEscapeKey={null}
                    onSubmit={null}
                    patch={
                      Object {
                        "token": "ABC",
                      }
                    }
                    successNotification="Formulaire non validé"
                  >
                    <Field
                      displayValue={[Function]}
                      errors={null}
                      layout="horizontal"
                      name="token"
                      size="normal"
                      storeValue={[Function]}
                      type="hidden"
                    />
                    <Field
                      displayValue={[Function]}
                      errors={null}
                      label="Nouveau mot de passe"
                      layout="horizontal"
                      name="newPassword"
                      placeholder="******"
                      required={true}
                      size="normal"
                      storeValue={[Function]}
                      type="password"
                      value="lolilol"
                    />
                    <div
                      className="errors"
                    />
                    <div
                      className="field buttons-field"
                    >
                      <SubmitButton
                        className="button is-primary is-outlined"
                        getDisabled={[Function]}
                        getTitle={[Function]}
                        id="changePassword"
                        requiredFields={Array []}
                        type="submit"
                      >
                        Envoyer
                      </SubmitButton>
                    </div>
                  </withRouter(Connect(_Form))>
                </div>
              </section>
            </div>
          </div>,
          "className": "container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="column is-offset-6 is-two-fifths"
            >
              <section
                className="hero has-text-grey"
              >
                <div
                  className="hero-body"
                >
                  <h1
                    className="title is-spaced is-1"
                  >
                    <span
                      className="has-text-weight-normal"
                    >
                      Créer un nouveau mot de passe
                    </span>
                  </h1>
                  <h2
                    className="subtitle is-2"
                  >
                    Saisissez le nouveau mot de passe
                  </h2>
                  <span
                    className="has-text-grey"
                  >
                    <span
                      className="required-legend"
                    >
                      *
                    </span>
                     Champs obligatoires
                  </span>
                  <withRouter(Connect(_Form))
                    BlockComponent={null}
                    Tag="form"
                    action="/users/new-password"
                    className={null}
                    errorsPatch={Object {}}
                    failNotification="Formulaire non validé"
                    formPatch={Object {}}
                    formatPatch={[Function]}
                    handleFail={null}
                    handleFailNotification={null}
                    handleFailRedirect={null}
                    handleSuccess={null}
                    handleSuccessNotification={null}
                    handleSuccessRedirect={[Function]}
                    layout="vertical"
                    name="user"
                    normalizer={null}
                    onEnterKey={null}
                    onEscapeKey={null}
                    onSubmit={null}
                    patch={
                      Object {
                        "token": "ABC",
                      }
                    }
                    successNotification="Formulaire non validé"
                  >
                    <Field
                      displayValue={[Function]}
                      errors={null}
                      layout="horizontal"
                      name="token"
                      size="normal"
                      storeValue={[Function]}
                      type="hidden"
                    />
                    <Field
                      displayValue={[Function]}
                      errors={null}
                      label="Nouveau mot de passe"
                      layout="horizontal"
                      name="newPassword"
                      placeholder="******"
                      required={true}
                      size="normal"
                      storeValue={[Function]}
                      type="password"
                      value="lolilol"
                    />
                    <div
                      className="errors"
                    />
                    <div
                      className="field buttons-field"
                    >
                      <SubmitButton
                        className="button is-primary is-outlined"
                        getDisabled={[Function]}
                        getTitle={[Function]}
                        id="changePassword"
                        requiredFields={Array []}
                        type="submit"
                      >
                        Envoyer
                      </SubmitButton>
                    </div>
                  </withRouter(Connect(_Form))>
                </div>
              </section>
            </div>,
            "className": "columns",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                false,
                false,
                <section
                  className="hero has-text-grey"
                >
                  <div
                    className="hero-body"
                  >
                    <h1
                      className="title is-spaced is-1"
                    >
                      <span
                        className="has-text-weight-normal"
                      >
                        Créer un nouveau mot de passe
                      </span>
                    </h1>
                    <h2
                      className="subtitle is-2"
                    >
                      Saisissez le nouveau mot de passe
                    </h2>
                    <span
                      className="has-text-grey"
                    >
                      <span
                        className="required-legend"
                      >
                        *
                      </span>
                       Champs obligatoires
                    </span>
                    <withRouter(Connect(_Form))
                      BlockComponent={null}
                      Tag="form"
                      action="/users/new-password"
                      className={null}
                      errorsPatch={Object {}}
                      failNotification="Formulaire non validé"
                      formPatch={Object {}}
                      formatPatch={[Function]}
                      handleFail={null}
                      handleFailNotification={null}
                      handleFailRedirect={null}
                      handleSuccess={null}
                      handleSuccessNotification={null}
                      handleSuccessRedirect={[Function]}
                      layout="vertical"
                      name="user"
                      normalizer={null}
                      onEnterKey={null}
                      onEscapeKey={null}
                      onSubmit={null}
                      patch={
                        Object {
                          "token": "ABC",
                        }
                      }
                      successNotification="Formulaire non validé"
                    >
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        layout="horizontal"
                        name="token"
                        size="normal"
                        storeValue={[Function]}
                        type="hidden"
                      />
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        label="Nouveau mot de passe"
                        layout="horizontal"
                        name="newPassword"
                        placeholder="******"
                        required={true}
                        size="normal"
                        storeValue={[Function]}
                        type="password"
                        value="lolilol"
                      />
                      <div
                        className="errors"
                      />
                      <div
                        className="field buttons-field"
                      >
                        <SubmitButton
                          className="button is-primary is-outlined"
                          getDisabled={[Function]}
                          getTitle={[Function]}
                          id="changePassword"
                          requiredFields={Array []}
                          type="submit"
                        >
                          Envoyer
                        </SubmitButton>
                      </div>
                    </withRouter(Connect(_Form))>
                  </div>
                </section>,
                false,
              ],
              "className": "column is-offset-6 is-two-fifths",
            },
            "ref": null,
            "rendered": Array [
              false,
              false,
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="hero-body"
                  >
                    <h1
                      className="title is-spaced is-1"
                    >
                      <span
                        className="has-text-weight-normal"
                      >
                        Créer un nouveau mot de passe
                      </span>
                    </h1>
                    <h2
                      className="subtitle is-2"
                    >
                      Saisissez le nouveau mot de passe
                    </h2>
                    <span
                      className="has-text-grey"
                    >
                      <span
                        className="required-legend"
                      >
                        *
                      </span>
                       Champs obligatoires
                    </span>
                    <withRouter(Connect(_Form))
                      BlockComponent={null}
                      Tag="form"
                      action="/users/new-password"
                      className={null}
                      errorsPatch={Object {}}
                      failNotification="Formulaire non validé"
                      formPatch={Object {}}
                      formatPatch={[Function]}
                      handleFail={null}
                      handleFailNotification={null}
                      handleFailRedirect={null}
                      handleSuccess={null}
                      handleSuccessNotification={null}
                      handleSuccessRedirect={[Function]}
                      layout="vertical"
                      name="user"
                      normalizer={null}
                      onEnterKey={null}
                      onEscapeKey={null}
                      onSubmit={null}
                      patch={
                        Object {
                          "token": "ABC",
                        }
                      }
                      successNotification="Formulaire non validé"
                    >
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        layout="horizontal"
                        name="token"
                        size="normal"
                        storeValue={[Function]}
                        type="hidden"
                      />
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        label="Nouveau mot de passe"
                        layout="horizontal"
                        name="newPassword"
                        placeholder="******"
                        required={true}
                        size="normal"
                        storeValue={[Function]}
                        type="password"
                        value="lolilol"
                      />
                      <div
                        className="errors"
                      />
                      <div
                        className="field buttons-field"
                      >
                        <SubmitButton
                          className="button is-primary is-outlined"
                          getDisabled={[Function]}
                          getTitle={[Function]}
                          id="changePassword"
                          requiredFields={Array []}
                          type="submit"
                        >
                          Envoyer
                        </SubmitButton>
                      </div>
                    </withRouter(Connect(_Form))>
                  </div>,
                  "className": "hero has-text-grey",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <h1
                        className="title is-spaced is-1"
                      >
                        <span
                          className="has-text-weight-normal"
                        >
                          Créer un nouveau mot de passe
                        </span>
                      </h1>,
                      <h2
                        className="subtitle is-2"
                      >
                        Saisissez le nouveau mot de passe
                      </h2>,
                      <span
                        className="has-text-grey"
                      >
                        <span
                          className="required-legend"
                        >
                          *
                        </span>
                         Champs obligatoires
                      </span>,
                      <withRouter(Connect(_Form))
                        BlockComponent={null}
                        Tag="form"
                        action="/users/new-password"
                        className={null}
                        errorsPatch={Object {}}
                        failNotification="Formulaire non validé"
                        formPatch={Object {}}
                        formatPatch={[Function]}
                        handleFail={null}
                        handleFailNotification={null}
                        handleFailRedirect={null}
                        handleSuccess={null}
                        handleSuccessNotification={null}
                        handleSuccessRedirect={[Function]}
                        layout="vertical"
                        name="user"
                        normalizer={null}
                        onEnterKey={null}
                        onEscapeKey={null}
                        onSubmit={null}
                        patch={
                          Object {
                            "token": "ABC",
                          }
                        }
                        successNotification="Formulaire non validé"
                      >
                        <Field
                          displayValue={[Function]}
                          errors={null}
                          layout="horizontal"
                          name="token"
                          size="normal"
                          storeValue={[Function]}
                          type="hidden"
                        />
                        <Field
                          displayValue={[Function]}
                          errors={null}
                          label="Nouveau mot de passe"
                          layout="horizontal"
                          name="newPassword"
                          placeholder="******"
                          required={true}
                          size="normal"
                          storeValue={[Function]}
                          type="password"
                          value="lolilol"
                        />
                        <div
                          className="errors"
                        />
                        <div
                          className="field buttons-field"
                        >
                          <SubmitButton
                            className="button is-primary is-outlined"
                            getDisabled={[Function]}
                            getTitle={[Function]}
                            id="changePassword"
                            requiredFields={Array []}
                            type="submit"
                          >
                            Envoyer
                          </SubmitButton>
                        </div>
                      </withRouter(Connect(_Form))>,
                    ],
                    "className": "hero-body",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <span
                          className="has-text-weight-normal"
                        >
                          Créer un nouveau mot de passe
                        </span>,
                        "className": "title is-spaced is-1",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Créer un nouveau mot de passe",
                          "className": "has-text-weight-normal",
                        },
                        "ref": null,
                        "rendered": "Créer un nouveau mot de passe",
                        "type": "span",
                      },
                      "type": "h1",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Saisissez le nouveau mot de passe",
                        "className": "subtitle is-2",
                      },
                      "ref": null,
                      "rendered": "Saisissez le nouveau mot de passe",
                      "type": "h2",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <span
                            className="required-legend"
                          >
                            *
                          </span>,
                          " Champs obligatoires",
                        ],
                        "className": "has-text-grey",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "*",
                            "className": "required-legend",
                          },
                          "ref": null,
                          "rendered": "*",
                          "type": "span",
                        },
                        " Champs obligatoires",
                      ],
                      "type": "span",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "BlockComponent": null,
                        "Tag": "form",
                        "action": "/users/new-password",
                        "children": Array [
                          <Field
                            displayValue={[Function]}
                            errors={null}
                            layout="horizontal"
                            name="token"
                            size="normal"
                            storeValue={[Function]}
                            type="hidden"
                          />,
                          <Field
                            displayValue={[Function]}
                            errors={null}
                            label="Nouveau mot de passe"
                            layout="horizontal"
                            name="newPassword"
                            placeholder="******"
                            required={true}
                            size="normal"
                            storeValue={[Function]}
                            type="password"
                            value="lolilol"
                          />,
                          <div
                            className="errors"
                          />,
                          <div
                            className="field buttons-field"
                          >
                            <SubmitButton
                              className="button is-primary is-outlined"
                              getDisabled={[Function]}
                              getTitle={[Function]}
                              id="changePassword"
                              requiredFields={Array []}
                              type="submit"
                            >
                              Envoyer
                            </SubmitButton>
                          </div>,
                        ],
                        "className": null,
                        "errorsPatch": Object {},
                        "failNotification": "Formulaire non validé",
                        "formPatch": Object {},
                        "formatPatch": [Function],
                        "handleFail": null,
                        "handleFailNotification": null,
                        "handleFailRedirect": null,
                        "handleSuccess": null,
                        "handleSuccessNotification": null,
                        "handleSuccessRedirect": [Function],
                        "layout": "vertical",
                        "name": "user",
                        "normalizer": null,
                        "onEnterKey": null,
                        "onEscapeKey": null,
                        "onSubmit": null,
                        "patch": Object {
                          "token": "ABC",
                        },
                        "successNotification": "Formulaire non validé",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "displayValue": [Function],
                            "errors": null,
                            "layout": "horizontal",
                            "name": "token",
                            "size": "normal",
                            "storeValue": [Function],
                            "type": "hidden",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "class",
                          "props": Object {
                            "displayValue": [Function],
                            "errors": null,
                            "label": "Nouveau mot de passe",
                            "layout": "horizontal",
                            "name": "newPassword",
                            "placeholder": "******",
                            "required": true,
                            "size": "normal",
                            "storeValue": [Function],
                            "type": "password",
                            "value": "lolilol",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": [Function],
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": Array [],
                            "className": "errors",
                          },
                          "ref": null,
                          "rendered": Array [],
                          "type": "div",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <SubmitButton
                              className="button is-primary is-outlined"
                              getDisabled={[Function]}
                              getTitle={[Function]}
                              id="changePassword"
                              requiredFields={Array []}
                              type="submit"
                            >
                              Envoyer
                            </SubmitButton>,
                            "className": "field buttons-field",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "function",
                            "props": Object {
                              "children": "Envoyer",
                              "className": "button is-primary is-outlined",
                              "getDisabled": [Function],
                              "getTitle": [Function],
                              "id": "changePassword",
                              "requiredFields": Array [],
                              "type": "submit",
                            },
                            "ref": null,
                            "rendered": "Envoyer",
                            "type": [Function],
                          },
                          "type": "div",
                        },
                      ],
                      "type": [Function],
                    },
                  ],
                  "type": "div",
                },
                "type": "section",
              },
              false,
            ],
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div
            className="logo-side"
          >
            <Logo
              className=""
              noLink={true}
              signPage={true}
              whiteHeader={false}
            />
          </div>,
          <div
            className="container"
          >
            <div
              className="columns"
            >
              <div
                className="column is-offset-6 is-two-fifths"
              >
                <section
                  className="hero has-text-grey"
                >
                  <div
                    className="hero-body"
                  >
                    <h1
                      className="title is-spaced is-1"
                    >
                      <span
                        className="has-text-weight-normal"
                      >
                        Créer un nouveau mot de passe
                      </span>
                    </h1>
                    <h2
                      className="subtitle is-2"
                    >
                      Saisissez le nouveau mot de passe
                    </h2>
                    <span
                      className="has-text-grey"
                    >
                      <span
                        className="required-legend"
                      >
                        *
                      </span>
                       Champs obligatoires
                    </span>
                    <withRouter(Connect(_Form))
                      BlockComponent={null}
                      Tag="form"
                      action="/users/new-password"
                      className={null}
                      errorsPatch={Object {}}
                      failNotification="Formulaire non validé"
                      formPatch={Object {}}
                      formatPatch={[Function]}
                      handleFail={null}
                      handleFailNotification={null}
                      handleFailRedirect={null}
                      handleSuccess={null}
                      handleSuccessNotification={null}
                      handleSuccessRedirect={[Function]}
                      layout="vertical"
                      name="user"
                      normalizer={null}
                      onEnterKey={null}
                      onEscapeKey={null}
                      onSubmit={null}
                      patch={
                        Object {
                          "token": "ABC",
                        }
                      }
                      successNotification="Formulaire non validé"
                    >
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        layout="horizontal"
                        name="token"
                        size="normal"
                        storeValue={[Function]}
                        type="hidden"
                      />
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        label="Nouveau mot de passe"
                        layout="horizontal"
                        name="newPassword"
                        placeholder="******"
                        required={true}
                        size="normal"
                        storeValue={[Function]}
                        type="password"
                        value="lolilol"
                      />
                      <div
                        className="errors"
                      />
                      <div
                        className="field buttons-field"
                      >
                        <SubmitButton
                          className="button is-primary is-outlined"
                          getDisabled={[Function]}
                          getTitle={[Function]}
                          id="changePassword"
                          requiredFields={Array []}
                          type="submit"
                        >
                          Envoyer
                        </SubmitButton>
                      </div>
                    </withRouter(Connect(_Form))>
                  </div>
                </section>
              </div>
            </div>
          </div>,
        ],
        "fullscreen": true,
        "name": "sign-in",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Logo
              className=""
              noLink={true}
              signPage={true}
              whiteHeader={false}
            />,
            "className": "logo-side",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "noLink": true,
              "signPage": true,
              "whiteHeader": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="columns"
            >
              <div
                className="column is-offset-6 is-two-fifths"
              >
                <section
                  className="hero has-text-grey"
                >
                  <div
                    className="hero-body"
                  >
                    <h1
                      className="title is-spaced is-1"
                    >
                      <span
                        className="has-text-weight-normal"
                      >
                        Créer un nouveau mot de passe
                      </span>
                    </h1>
                    <h2
                      className="subtitle is-2"
                    >
                      Saisissez le nouveau mot de passe
                    </h2>
                    <span
                      className="has-text-grey"
                    >
                      <span
                        className="required-legend"
                      >
                        *
                      </span>
                       Champs obligatoires
                    </span>
                    <withRouter(Connect(_Form))
                      BlockComponent={null}
                      Tag="form"
                      action="/users/new-password"
                      className={null}
                      errorsPatch={Object {}}
                      failNotification="Formulaire non validé"
                      formPatch={Object {}}
                      formatPatch={[Function]}
                      handleFail={null}
                      handleFailNotification={null}
                      handleFailRedirect={null}
                      handleSuccess={null}
                      handleSuccessNotification={null}
                      handleSuccessRedirect={[Function]}
                      layout="vertical"
                      name="user"
                      normalizer={null}
                      onEnterKey={null}
                      onEscapeKey={null}
                      onSubmit={null}
                      patch={
                        Object {
                          "token": "ABC",
                        }
                      }
                      successNotification="Formulaire non validé"
                    >
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        layout="horizontal"
                        name="token"
                        size="normal"
                        storeValue={[Function]}
                        type="hidden"
                      />
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        label="Nouveau mot de passe"
                        layout="horizontal"
                        name="newPassword"
                        placeholder="******"
                        required={true}
                        size="normal"
                        storeValue={[Function]}
                        type="password"
                        value="lolilol"
                      />
                      <div
                        className="errors"
                      />
                      <div
                        className="field buttons-field"
                      >
                        <SubmitButton
                          className="button is-primary is-outlined"
                          getDisabled={[Function]}
                          getTitle={[Function]}
                          id="changePassword"
                          requiredFields={Array []}
                          type="submit"
                        >
                          Envoyer
                        </SubmitButton>
                      </div>
                    </withRouter(Connect(_Form))>
                  </div>
                </section>
              </div>
            </div>,
            "className": "container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="column is-offset-6 is-two-fifths"
              >
                <section
                  className="hero has-text-grey"
                >
                  <div
                    className="hero-body"
                  >
                    <h1
                      className="title is-spaced is-1"
                    >
                      <span
                        className="has-text-weight-normal"
                      >
                        Créer un nouveau mot de passe
                      </span>
                    </h1>
                    <h2
                      className="subtitle is-2"
                    >
                      Saisissez le nouveau mot de passe
                    </h2>
                    <span
                      className="has-text-grey"
                    >
                      <span
                        className="required-legend"
                      >
                        *
                      </span>
                       Champs obligatoires
                    </span>
                    <withRouter(Connect(_Form))
                      BlockComponent={null}
                      Tag="form"
                      action="/users/new-password"
                      className={null}
                      errorsPatch={Object {}}
                      failNotification="Formulaire non validé"
                      formPatch={Object {}}
                      formatPatch={[Function]}
                      handleFail={null}
                      handleFailNotification={null}
                      handleFailRedirect={null}
                      handleSuccess={null}
                      handleSuccessNotification={null}
                      handleSuccessRedirect={[Function]}
                      layout="vertical"
                      name="user"
                      normalizer={null}
                      onEnterKey={null}
                      onEscapeKey={null}
                      onSubmit={null}
                      patch={
                        Object {
                          "token": "ABC",
                        }
                      }
                      successNotification="Formulaire non validé"
                    >
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        layout="horizontal"
                        name="token"
                        size="normal"
                        storeValue={[Function]}
                        type="hidden"
                      />
                      <Field
                        displayValue={[Function]}
                        errors={null}
                        label="Nouveau mot de passe"
                        layout="horizontal"
                        name="newPassword"
                        placeholder="******"
                        required={true}
                        size="normal"
                        storeValue={[Function]}
                        type="password"
                        value="lolilol"
                      />
                      <div
                        className="errors"
                      />
                      <div
                        className="field buttons-field"
                      >
                        <SubmitButton
                          className="button is-primary is-outlined"
                          getDisabled={[Function]}
                          getTitle={[Function]}
                          id="changePassword"
                          requiredFields={Array []}
                          type="submit"
                        >
                          Envoyer
                        </SubmitButton>
                      </div>
                    </withRouter(Connect(_Form))>
                  </div>
                </section>
              </div>,
              "className": "columns",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  false,
                  false,
                  <section
                    className="hero has-text-grey"
                  >
                    <div
                      className="hero-body"
                    >
                      <h1
                        className="title is-spaced is-1"
                      >
                        <span
                          className="has-text-weight-normal"
                        >
                          Créer un nouveau mot de passe
                        </span>
                      </h1>
                      <h2
                        className="subtitle is-2"
                      >
                        Saisissez le nouveau mot de passe
                      </h2>
                      <span
                        className="has-text-grey"
                      >
                        <span
                          className="required-legend"
                        >
                          *
                        </span>
                         Champs obligatoires
                      </span>
                      <withRouter(Connect(_Form))
                        BlockComponent={null}
                        Tag="form"
                        action="/users/new-password"
                        className={null}
                        errorsPatch={Object {}}
                        failNotification="Formulaire non validé"
                        formPatch={Object {}}
                        formatPatch={[Function]}
                        handleFail={null}
                        handleFailNotification={null}
                        handleFailRedirect={null}
                        handleSuccess={null}
                        handleSuccessNotification={null}
                        handleSuccessRedirect={[Function]}
                        layout="vertical"
                        name="user"
                        normalizer={null}
                        onEnterKey={null}
                        onEscapeKey={null}
                        onSubmit={null}
                        patch={
                          Object {
                            "token": "ABC",
                          }
                        }
                        successNotification="Formulaire non validé"
                      >
                        <Field
                          displayValue={[Function]}
                          errors={null}
                          layout="horizontal"
                          name="token"
                          size="normal"
                          storeValue={[Function]}
                          type="hidden"
                        />
                        <Field
                          displayValue={[Function]}
                          errors={null}
                          label="Nouveau mot de passe"
                          layout="horizontal"
                          name="newPassword"
                          placeholder="******"
                          required={true}
                          size="normal"
                          storeValue={[Function]}
                          type="password"
                          value="lolilol"
                        />
                        <div
                          className="errors"
                        />
                        <div
                          className="field buttons-field"
                        >
                          <SubmitButton
                            className="button is-primary is-outlined"
                            getDisabled={[Function]}
                            getTitle={[Function]}
                            id="changePassword"
                            requiredFields={Array []}
                            type="submit"
                          >
                            Envoyer
                          </SubmitButton>
                        </div>
                      </withRouter(Connect(_Form))>
                    </div>
                  </section>,
                  false,
                ],
                "className": "column is-offset-6 is-two-fifths",
              },
              "ref": null,
              "rendered": Array [
                false,
                false,
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <div
                      className="hero-body"
                    >
                      <h1
                        className="title is-spaced is-1"
                      >
                        <span
                          className="has-text-weight-normal"
                        >
                          Créer un nouveau mot de passe
                        </span>
                      </h1>
                      <h2
                        className="subtitle is-2"
                      >
                        Saisissez le nouveau mot de passe
                      </h2>
                      <span
                        className="has-text-grey"
                      >
                        <span
                          className="required-legend"
                        >
                          *
                        </span>
                         Champs obligatoires
                      </span>
                      <withRouter(Connect(_Form))
                        BlockComponent={null}
                        Tag="form"
                        action="/users/new-password"
                        className={null}
                        errorsPatch={Object {}}
                        failNotification="Formulaire non validé"
                        formPatch={Object {}}
                        formatPatch={[Function]}
                        handleFail={null}
                        handleFailNotification={null}
                        handleFailRedirect={null}
                        handleSuccess={null}
                        handleSuccessNotification={null}
                        handleSuccessRedirect={[Function]}
                        layout="vertical"
                        name="user"
                        normalizer={null}
                        onEnterKey={null}
                        onEscapeKey={null}
                        onSubmit={null}
                        patch={
                          Object {
                            "token": "ABC",
                          }
                        }
                        successNotification="Formulaire non validé"
                      >
                        <Field
                          displayValue={[Function]}
                          errors={null}
                          layout="horizontal"
                          name="token"
                          size="normal"
                          storeValue={[Function]}
                          type="hidden"
                        />
                        <Field
                          displayValue={[Function]}
                          errors={null}
                          label="Nouveau mot de passe"
                          layout="horizontal"
                          name="newPassword"
                          placeholder="******"
                          required={true}
                          size="normal"
                          storeValue={[Function]}
                          type="password"
                          value="lolilol"
                        />
                        <div
                          className="errors"
                        />
                        <div
                          className="field buttons-field"
                        >
                          <SubmitButton
                            className="button is-primary is-outlined"
                            getDisabled={[Function]}
                            getTitle={[Function]}
                            id="changePassword"
                            requiredFields={Array []}
                            type="submit"
                          >
                            Envoyer
                          </SubmitButton>
                        </div>
                      </withRouter(Connect(_Form))>
                    </div>,
                    "className": "hero has-text-grey",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <h1
                          className="title is-spaced is-1"
                        >
                          <span
                            className="has-text-weight-normal"
                          >
                            Créer un nouveau mot de passe
                          </span>
                        </h1>,
                        <h2
                          className="subtitle is-2"
                        >
                          Saisissez le nouveau mot de passe
                        </h2>,
                        <span
                          className="has-text-grey"
                        >
                          <span
                            className="required-legend"
                          >
                            *
                          </span>
                           Champs obligatoires
                        </span>,
                        <withRouter(Connect(_Form))
                          BlockComponent={null}
                          Tag="form"
                          action="/users/new-password"
                          className={null}
                          errorsPatch={Object {}}
                          failNotification="Formulaire non validé"
                          formPatch={Object {}}
                          formatPatch={[Function]}
                          handleFail={null}
                          handleFailNotification={null}
                          handleFailRedirect={null}
                          handleSuccess={null}
                          handleSuccessNotification={null}
                          handleSuccessRedirect={[Function]}
                          layout="vertical"
                          name="user"
                          normalizer={null}
                          onEnterKey={null}
                          onEscapeKey={null}
                          onSubmit={null}
                          patch={
                            Object {
                              "token": "ABC",
                            }
                          }
                          successNotification="Formulaire non validé"
                        >
                          <Field
                            displayValue={[Function]}
                            errors={null}
                            layout="horizontal"
                            name="token"
                            size="normal"
                            storeValue={[Function]}
                            type="hidden"
                          />
                          <Field
                            displayValue={[Function]}
                            errors={null}
                            label="Nouveau mot de passe"
                            layout="horizontal"
                            name="newPassword"
                            placeholder="******"
                            required={true}
                            size="normal"
                            storeValue={[Function]}
                            type="password"
                            value="lolilol"
                          />
                          <div
                            className="errors"
                          />
                          <div
                            className="field buttons-field"
                          >
                            <SubmitButton
                              className="button is-primary is-outlined"
                              getDisabled={[Function]}
                              getTitle={[Function]}
                              id="changePassword"
                              requiredFields={Array []}
                              type="submit"
                            >
                              Envoyer
                            </SubmitButton>
                          </div>
                        </withRouter(Connect(_Form))>,
                      ],
                      "className": "hero-body",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <span
                            className="has-text-weight-normal"
                          >
                            Créer un nouveau mot de passe
                          </span>,
                          "className": "title is-spaced is-1",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Créer un nouveau mot de passe",
                            "className": "has-text-weight-normal",
                          },
                          "ref": null,
                          "rendered": "Créer un nouveau mot de passe",
                          "type": "span",
                        },
                        "type": "h1",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Saisissez le nouveau mot de passe",
                          "className": "subtitle is-2",
                        },
                        "ref": null,
                        "rendered": "Saisissez le nouveau mot de passe",
                        "type": "h2",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <span
                              className="required-legend"
                            >
                              *
                            </span>,
                            " Champs obligatoires",
                          ],
                          "className": "has-text-grey",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "*",
                              "className": "required-legend",
                            },
                            "ref": null,
                            "rendered": "*",
                            "type": "span",
                          },
                          " Champs obligatoires",
                        ],
                        "type": "span",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "BlockComponent": null,
                          "Tag": "form",
                          "action": "/users/new-password",
                          "children": Array [
                            <Field
                              displayValue={[Function]}
                              errors={null}
                              layout="horizontal"
                              name="token"
                              size="normal"
                              storeValue={[Function]}
                              type="hidden"
                            />,
                            <Field
                              displayValue={[Function]}
                              errors={null}
                              label="Nouveau mot de passe"
                              layout="horizontal"
                              name="newPassword"
                              placeholder="******"
                              required={true}
                              size="normal"
                              storeValue={[Function]}
                              type="password"
                              value="lolilol"
                            />,
                            <div
                              className="errors"
                            />,
                            <div
                              className="field buttons-field"
                            >
                              <SubmitButton
                                className="button is-primary is-outlined"
                                getDisabled={[Function]}
                                getTitle={[Function]}
                                id="changePassword"
                                requiredFields={Array []}
                                type="submit"
                              >
                                Envoyer
                              </SubmitButton>
                            </div>,
                          ],
                          "className": null,
                          "errorsPatch": Object {},
                          "failNotification": "Formulaire non validé",
                          "formPatch": Object {},
                          "formatPatch": [Function],
                          "handleFail": null,
                          "handleFailNotification": null,
                          "handleFailRedirect": null,
                          "handleSuccess": null,
                          "handleSuccessNotification": null,
                          "handleSuccessRedirect": [Function],
                          "layout": "vertical",
                          "name": "user",
                          "normalizer": null,
                          "onEnterKey": null,
                          "onEscapeKey": null,
                          "onSubmit": null,
                          "patch": Object {
                            "token": "ABC",
                          },
                          "successNotification": "Formulaire non validé",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "displayValue": [Function],
                              "errors": null,
                              "layout": "horizontal",
                              "name": "token",
                              "size": "normal",
                              "storeValue": [Function],
                              "type": "hidden",
                            },
                            "ref": null,
                            "rendered": null,
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "class",
                            "props": Object {
                              "displayValue": [Function],
                              "errors": null,
                              "label": "Nouveau mot de passe",
                              "layout": "horizontal",
                              "name": "newPassword",
                              "placeholder": "******",
                              "required": true,
                              "size": "normal",
                              "storeValue": [Function],
                              "type": "password",
                              "value": "lolilol",
                            },
                            "ref": null,
                            "rendered": null,
                            "type": [Function],
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": Array [],
                              "className": "errors",
                            },
                            "ref": null,
                            "rendered": Array [],
                            "type": "div",
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": <SubmitButton
                                className="button is-primary is-outlined"
                                getDisabled={[Function]}
                                getTitle={[Function]}
                                id="changePassword"
                                requiredFields={Array []}
                                type="submit"
                              >
                                Envoyer
                              </SubmitButton>,
                              "className": "field buttons-field",
                            },
                            "ref": null,
                            "rendered": Object {
                              "instance": null,
                              "key": undefined,
                              "nodeType": "function",
                              "props": Object {
                                "children": "Envoyer",
                                "className": "button is-primary is-outlined",
                                "getDisabled": [Function],
                                "getTitle": [Function],
                                "id": "changePassword",
                                "requiredFields": Array [],
                                "type": "submit",
                              },
                              "ref": null,
                              "rendered": "Envoyer",
                              "type": [Function],
                            },
                            "type": "div",
                          },
                        ],
                        "type": [Function],
                      },
                    ],
                    "type": "div",
                  },
                  "type": "section",
                },
                false,
              ],
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
